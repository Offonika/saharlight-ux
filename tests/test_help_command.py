from types import SimpleNamespace
from typing import Any, cast

import pytest
from telegram import Update
from telegram.ext import CallbackContext

import services.api.app.diabetes.handlers.common_handlers as handlers


class DummyMessage:
    def __init__(self) -> None:
        self.replies: list[str] = []
        self.kwargs: list[dict[str, Any]] = []

    async def reply_text(self, text: str, **kwargs: Any) -> None:
        self.replies.append(text)
        self.kwargs.append(kwargs)


@pytest.mark.asyncio
async def test_help_includes_new_features() -> None:
    """Ensure /help mentions wizard, smart-input and edit features."""

    message = DummyMessage()
    update = cast(Update, SimpleNamespace(message=message))
    context = cast(
        CallbackContext[Any, dict[str, Any], dict[str, Any], dict[str, Any]],
        SimpleNamespace(),
    )

    await handlers.help_command(update, context)

    assert (
        message.kwargs[0]["reply_markup"].keyboard
        == handlers.menu_keyboard().keyboard
    )
    text = message.replies[0]
    assert "üÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n" in text
    assert "‚Ä¢ ‚ú® –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ\n" in text
    assert "‚Ä¢ üïπ –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ (smart-input)\n" in text
    assert "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n\n" in text


@pytest.mark.asyncio
async def test_help_includes_security_block() -> None:
    """Ensure /help mentions security settings."""

    message = DummyMessage()
    update = cast(Update, SimpleNamespace(message=message))
    context = cast(
        CallbackContext[Any, dict[str, Any], dict[str, Any], dict[str, Any]],
        SimpleNamespace(),
    )

    await handlers.help_command(update, context)

    text = message.replies[0]
    assert "üîî –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n" in text
    assert "–ü–æ—Ä–æ–≥–∏" in text
    assert "SOS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" in text
    assert "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" in text
    assert "/hypoalert" in text
    assert "/profile" in text


@pytest.mark.asyncio
async def test_help_lists_reminder_commands_and_menu_button() -> None:
    """Ensure reminder commands and menu button are documented."""

    message = DummyMessage()
    update = cast(Update, SimpleNamespace(message=message))
    context = cast(
        CallbackContext[Any, dict[str, Any], dict[str, Any], dict[str, Any]],
        SimpleNamespace(),
    )

    await handlers.help_command(update, context)

    text = message.replies[0]
    assert "/reminders - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n" in text
    assert "/addreminder" not in text
    assert "/delreminder" not in text


@pytest.mark.asyncio
async def test_help_lists_sos_contact_command() -> None:
    """Ensure /help documents SOS contact configuration."""

    message = DummyMessage()
    update = cast(Update, SimpleNamespace(message=message))
    context = cast(
        CallbackContext[Any, dict[str, Any], dict[str, Any], dict[str, Any]],
        SimpleNamespace(),
    )

    await handlers.help_command(update, context)

    text = message.replies[0]
    assert "/soscontact ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è SOS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n" in text


@pytest.mark.asyncio
async def test_help_lists_topics_command() -> None:
    """Ensure /help documents the topics command."""

    message = DummyMessage()
    update = cast(Update, SimpleNamespace(message=message))
    context = cast(
        CallbackContext[Any, dict[str, Any], dict[str, Any], dict[str, Any]],
        SimpleNamespace(),
    )

    await handlers.help_command(update, context)

    text = message.replies[0]
    assert "/topics - —Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è\n" in text
