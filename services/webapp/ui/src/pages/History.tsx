import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Calendar, TrendingUp, Edit2, Trash2, Filter } from 'lucide-react';
import { MedicalHeader } from '@/components/MedicalHeader';
import { useToast } from '@/hooks/use-toast';
import MedicalButton from '@/components/MedicalButton';

interface HistoryRecord {
  id: string;
  date: string;
  time: string;
  sugar?: number;
  carbs?: number;
  breadUnits?: number;
  insulin?: number;
  notes?: string;
  type: 'measurement' | 'meal' | 'insulin';
}

const History = () => {
  const navigate = useNavigate();
  const { toast } = useToast();

  const [records, setRecords] = useState<HistoryRecord[]>([
    {
      id: '1',
      date: '2024-01-08',
      time: '08:30',
      sugar: 6.2,
      type: 'measurement',
      notes: '–£—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫'
    },
    {
      id: '2',
      date: '2024-01-08',
      time: '09:00',
      sugar: 5.8,
      carbs: 45,
      breadUnits: 3.8,
      insulin: 4,
      type: 'meal',
      notes: '–ó–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏'
    },
    {
      id: '3',
      date: '2024-01-08',
      time: '13:15',
      sugar: 8.2,
      carbs: 60,
      breadUnits: 5.0,
      insulin: 6,
      type: 'meal',
      notes: '–û–±–µ–¥: –º–∞–∫–∞—Ä–æ–Ω—ã —Å –º—è—Å–æ–º'
    },
    {
      id: '4',
      date: '2024-01-07',
      time: '22:00',
      insulin: 18,
      type: 'insulin',
      notes: '–î–ª–∏–Ω–Ω—ã–π –∏–Ω—Å—É–ª–∏–Ω –ø–µ—Ä–µ–¥ —Å–Ω–æ–º'
    }
  ]);

  const [selectedDate, setSelectedDate] = useState('');
  const [selectedType, setSelectedType] = useState<string>('all');
  const [editingRecord, setEditingRecord] = useState<HistoryRecord | null>(null);

  const filteredRecords = records.filter(record => {
    const dateMatch = !selectedDate || record.date === selectedDate;
    const typeMatch = selectedType === 'all' || record.type === selectedType;
    return dateMatch && typeMatch;
  });

  const handleEditRecord = (record: HistoryRecord) => {
    setEditingRecord({ ...record });
  };

  const handleUpdateRecord = async () => {
    if (editingRecord) {
      try {
        const res = await fetch('/history', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(editingRecord),
        });
        const data = await res.json();
        if (!res.ok || data.status !== 'ok') {
          throw new Error('failed');
        }

        setRecords(prev =>
          prev.map(r => (r.id === editingRecord.id ? editingRecord : r))
        );
        setEditingRecord(null);
        toast({
          title: '–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
          description: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        });
      } catch {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å',
          variant: 'destructive',
        });
      }
    }
  };

  const handleDeleteRecord = (id: string) => {
    toast({
      title: "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞",
      description: "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"
    });
  };

  const getRecordIcon = (type: string) => {
    switch (type) {
      case 'measurement': return 'ü©∏';
      case 'meal': return 'üçΩÔ∏è';
      case 'insulin': return 'üíâ';
      default: return 'üìù';
    }
  };

  const getRecordColor = (type: string) => {
    switch (type) {
      case 'measurement': return 'medical-error';
      case 'meal': return 'medical-success';
      case 'insulin': return 'medical-blue';
      default: return 'neutral-500';
    }
  };

  const getSugarColor = (sugar: number) => {
    if (sugar < 4) return 'text-medical-error';
    if (sugar > 10) return 'text-medical-warning';
    if (sugar >= 4 && sugar <= 7) return 'text-medical-success';
    return 'text-medical-teal';
  };

  return (
    <div className="min-h-screen bg-background">
      <MedicalHeader 
        title="–ò—Å—Ç–æ—Ä–∏—è" 
        showBack 
        onBack={() => navigate('/')}
      />
      
      <main className="container mx-auto px-4 py-6">
        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="medical-card mb-6">
          <div className="flex items-center gap-2 mb-4">
            <Filter className="w-4 h-4 text-muted-foreground" />
            <span className="font-medium text-foreground">–§–∏–ª—å—Ç—Ä—ã</span>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                –î–∞—Ç–∞
              </label>
              <input
                type="date"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                className="medical-input"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                –¢–∏–ø –∑–∞–ø–∏—Å–∏
              </label>
              <select
                value={selectedType}
                onChange={(e) => setSelectedType(e.target.value)}
                className="medical-input"
              >
                <option value="all">–í—Å–µ –∑–∞–ø–∏—Å–∏</option>
                <option value="measurement">–ò–∑–º–µ—Ä–µ–Ω–∏—è</option>
                <option value="meal">–ï–¥–∞</option>
                <option value="insulin">–ò–Ω—Å—É–ª–∏–Ω</option>
              </select>
            </div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-3 gap-3 mb-6">
          <div className="medical-card text-center py-4">
            <div className="text-xl font-bold text-medical-success">6.8</div>
            <div className="text-xs text-muted-foreground">–°—Ä–µ–¥–Ω–∏–π —Å–∞—Ö–∞—Ä</div>
          </div>
          <div className="medical-card text-center py-4">
            <div className="text-xl font-bold text-medical-teal">24</div>
            <div className="text-xs text-muted-foreground">–ó–∞–ø–∏—Å–µ–π</div>
          </div>
          <div className="medical-card text-center py-4">
            <div className="text-xl font-bold text-medical-blue">85%</div>
            <div className="text-xs text-muted-foreground">–í –Ω–æ—Ä–º–µ</div>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π */}
        <div className="space-y-3">
          {filteredRecords.map((record, index) => (
            <div
              key={record.id}
              className="medical-list-item"
              style={{ animationDelay: `${index * 50}ms` }}
            >
              <div className="flex items-start gap-3">
                <div className={`w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0 ${
                  getRecordColor(record.type) === 'medical-error' ? 'bg-medical-error/10' :
                  getRecordColor(record.type) === 'medical-success' ? 'bg-medical-success/10' :
                  getRecordColor(record.type) === 'medical-blue' ? 'bg-medical-blue/10' :
                  'bg-neutral-500/10'
                }`}>
                  <span className="text-lg">{getRecordIcon(record.type)}</span>
                </div>
                
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between mb-1">
                    <div className="flex items-center gap-2">
                      <span className="text-sm text-muted-foreground">
                        {new Date(record.date).toLocaleDateString('ru-RU')}
                      </span>
                      <span className="text-sm font-medium">{record.time}</span>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <MedicalButton
                        size="icon"
                        onClick={() => handleEditRecord(record)}
                        className="bg-transparent hover:bg-secondary text-muted-foreground border-0 p-1"
                        aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      >
                        <Edit2 className="w-3 h-3" />
                      </MedicalButton>
                      <MedicalButton
                        size="icon"
                        onClick={() => handleDeleteRecord(record.id)}
                        className="bg-transparent hover:bg-destructive/10 hover:text-destructive text-muted-foreground border-0 p-1"
                        aria-label="–£–¥–∞–ª–∏—Ç—å"
                      >
                        <Trash2 className="w-3 h-3" />
                      </MedicalButton>
                    </div>
                  </div>

                  <div className="grid grid-cols-4 gap-4 text-sm mb-2">
                    {record.sugar && (
                      <div>
                        <div className={`font-semibold ${getSugarColor(record.sugar)}`}>
                          {record.sugar}
                        </div>
                        <div className="text-xs text-muted-foreground">–º–º–æ–ª—å/–ª</div>
                      </div>
                    )}
                    
                    {record.carbs && (
                      <div>
                        <div className="font-semibold text-foreground">{record.carbs}</div>
                        <div className="text-xs text-muted-foreground">–≥ —É–≥–ª–µ–≤.</div>
                      </div>
                    )}
                    
                    {record.breadUnits && (
                      <div>
                        <div className="font-semibold text-foreground">{record.breadUnits}</div>
                        <div className="text-xs text-muted-foreground">–•–ï</div>
                      </div>
                    )}
                    
                    {record.insulin && (
                      <div>
                        <div className="font-semibold text-medical-blue">{record.insulin}</div>
                        <div className="text-xs text-muted-foreground">–µ–¥.</div>
                      </div>
                    )}
                  </div>
                  
                  {record.notes && (
                    <p className="text-sm text-muted-foreground truncate">
                      {record.notes}
                    </p>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {editingRecord && (
          <div className="medical-card animate-scale-in mt-6">
            <h3 className="font-semibold text-foreground mb-4">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏</h3>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  –î–∞—Ç–∞
                </label>
                <input
                  type="date"
                  value={editingRecord.date}
                  onChange={e =>
                    setEditingRecord(prev =>
                      prev ? { ...prev, date: e.target.value } : prev
                    )
                  }
                  className="medical-input"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  –í—Ä–µ–º—è
                </label>
                <input
                  type="time"
                  value={editingRecord.time}
                  onChange={e =>
                    setEditingRecord(prev =>
                      prev ? { ...prev, time: e.target.value } : prev
                    )
                  }
                  className="medical-input"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  –°–∞—Ö–∞—Ä (–º–º–æ–ª—å/–ª)
                </label>
                <input
                  type="number"
                  step="0.1"
                  value={editingRecord.sugar ?? ''}
                  onChange={e =>
                    setEditingRecord(prev =>
                      prev
                        ? {
                            ...prev,
                            sugar: e.target.value ? Number(e.target.value) : undefined,
                          }
                        : prev
                    )
                  }
                  className="medical-input"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  –£–≥–ª–µ–≤–æ–¥—ã (–≥)
                </label>
                <input
                  type="number"
                  value={editingRecord.carbs ?? ''}
                  onChange={e =>
                    setEditingRecord(prev =>
                      prev
                        ? {
                            ...prev,
                            carbs: e.target.value ? Number(e.target.value) : undefined,
                          }
                        : prev
                    )
                  }
                  className="medical-input"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  –•–ï
                </label>
                <input
                  type="number"
                  value={editingRecord.breadUnits ?? ''}
                  onChange={e =>
                    setEditingRecord(prev =>
                      prev
                        ? {
                            ...prev,
                            breadUnits: e.target.value ? Number(e.target.value) : undefined,
                          }
                        : prev
                    )
                  }
                  className="medical-input"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  –ò–Ω—Å—É–ª–∏–Ω (–µ–¥.)
                </label>
                <input
                  type="number"
                  value={editingRecord.insulin ?? ''}
                  onChange={e =>
                    setEditingRecord(prev =>
                      prev
                        ? {
                            ...prev,
                            insulin: e.target.value ? Number(e.target.value) : undefined,
                          }
                        : prev
                    )
                  }
                  className="medical-input"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  –ó–∞–º–µ—Ç–∫–∏
                </label>
                <input
                  type="text"
                  value={editingRecord.notes ?? ''}
                  onChange={e =>
                    setEditingRecord(prev =>
                      prev ? { ...prev, notes: e.target.value } : prev
                    )
                  }
                  className="medical-input"
                  placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                />
              </div>

              <div className="flex gap-3 pt-2">
                <MedicalButton
                  type="button"
                  onClick={handleUpdateRecord}
                  className="flex-1"
                  size="lg"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </MedicalButton>
                <MedicalButton
                  type="button"
                  onClick={() => setEditingRecord(null)}
                  variant="secondary"
                  className="flex-1"
                  size="lg"
                >
                  –û—Ç–º–µ–Ω–∞
                </MedicalButton>
              </div>
            </div>
          </div>
        )}

        {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
        {filteredRecords.length === 0 && (
          <div className="text-center py-12">
            <Calendar className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-medium text-foreground mb-2">
              –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </h3>
            <p className="text-muted-foreground">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            </p>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ */}
        <div className="mt-8">
          <MedicalButton
            onClick={() => navigate('/analytics')}
            className="w-full flex items-center justify-center gap-2"
            size="lg"
          >
            <TrendingUp className="w-4 h-4" />
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
          </MedicalButton>
        </div>
      </main>
    </div>
  );
};

export default History;
