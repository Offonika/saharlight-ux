import React, { useEffect, useMemo, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { useRemindersApi } from "../api/reminders";
import { DayOfWeekPicker } from "../components/DayOfWeekPicker";
import {
  buildReminderPayload,
  type ReminderFormValues,
  type ScheduleKind,
  type ReminderType,
} from "../api/buildPayload";
import { useTelegramInitData } from "../../../hooks/useTelegramInitData";

const TYPE_OPTIONS: { value: ReminderType; label: string }[] = [
  { value: "sugar", label: "–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞" },
  { value: "insulin_short", label: "–ò–Ω—Å—É–ª–∏–Ω (–∫–æ—Ä–æ—Ç–∫–∏–π)" },
  { value: "insulin_long", label: "–ò–Ω—Å—É–ª–∏–Ω (–¥–ª–∏–Ω–Ω—ã–π)" },
  { value: "after_meal", label: "–ü–æ—Å–ª–µ –µ–¥—ã" },
  { value: "meal", label: "–ü—Ä–∏—ë–º –ø–∏—â–∏" },
  { value: "sensor_change", label: "–°–º–µ–Ω–∞ —Å–µ–Ω—Å–æ—Ä–∞" },
  { value: "injection_site", label: "–°–º–µ–Ω–∞ –º–µ—Å—Ç–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏" },
  { value: "custom", label: "–î—Ä—É–≥–æ–µ" },
];

const KIND_OPTIONS: { value: ScheduleKind; label: string }[] = [
  { value: "at_time", label: "–í—Ä–µ–º—è" },
  { value: "every", label: "–ö–∞–∂–¥—ã–µ‚Ä¶" },
  { value: "after_event", label: "–ü–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è" },
];

function getTelegramUserId(initData: string): number {
  try {
    const raw = new URLSearchParams(initData).get("user");
    if (!raw) return 0;
    const u = JSON.parse(decodeURIComponent(raw));
    return Number(u?.id ?? 0);
  } catch {
    return 0;
  }
}

function schedulePreview(f: ReminderFormValues) {
  const map: Record<ReminderType, string> = {
    sugar: "–°–∞—Ö–∞—Ä",
    insulin_short: "–ö–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Å—É–ª–∏–Ω",
    insulin_long: "–î–ª–∏–Ω–Ω—ã–π –∏–Ω—Å—É–ª–∏–Ω",
    after_meal: "–ü–æ—Å–ª–µ –µ–¥—ã",
    meal: "–ü—Ä–∏—ë–º –ø–∏—â–∏",
    sensor_change: "–°–º–µ–Ω–∞ —Å–µ–Ω—Å–æ—Ä–∞",
    injection_site: "–°–º–µ–Ω–∞ –º–µ—Å—Ç–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏",
    custom: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
  };
  const title = f.title?.trim() || map[f.type] || "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ";
  if (f.kind === "at_time" && f.time) return `üî¥ ${title}, ${f.time}`;
  if (f.kind === "every" && f.intervalMinutes) return `üîî ${title} ‚Ä¢ –∫–∞–∂–¥—ã–µ ${f.intervalMinutes} –º–∏–Ω`;
  if (f.kind === "after_event" && f.minutesAfter) return `üçΩ ${title} ‚Ä¢ —á–µ—Ä–µ–∑ ${f.minutesAfter} –º–∏–Ω (–ø–æ—Å–ª–µ –µ–¥—ã)`;
  return title;
}

export default function RemindersEdit() {
  const { id } = useParams();
  const api = useRemindersApi();
  const initData = useTelegramInitData();
  const telegramId = useMemo(() => getTelegramUserId(initData), [initData]);
  const nav = useNavigate();

  const [loading, setLoading] = useState(true);
  const [form, setForm] = useState<ReminderFormValues | null>(null);
  const [isDirty, setDirty] = useState(false);

  const onChange = <K extends keyof ReminderFormValues>(k: K, v: ReminderFormValues[K]) => {
    setDirty(true);
    setForm((s) => (s ? { ...s, [k]: v } : s));
  };

  const switchKind = (k: ScheduleKind) =>
    setForm((s) =>
      s
        ? {
            ...s,
            kind: k,
            time: k === "at_time" ? (s.time ?? "07:30") : undefined,
            intervalMinutes: k === "every" ? (s.intervalMinutes ?? 60) : undefined,
            minutesAfter: k === "after_event" ? (s.minutesAfter ?? 120) : undefined,
            type: k === "after_event" ? "after_meal" : s.type,
          }
        : s
    );

  useEffect(() => {
    (async () => {
      try {
        const dto: any = await api.remindersIdGet(Number(id), { telegramId } as any);
        // backend —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç kind; –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º fallback
        const detectedKind: ScheduleKind =
          dto.kind ||
          (dto.time ? "at_time" : dto.intervalMinutes || dto.intervalHours ? "every" : "after_event");

        const fv: ReminderFormValues = {
          telegramId,
          type: (detectedKind === "after_event" ? "after_meal" : dto.type) as ReminderType,
          kind: detectedKind,
          time: dto.time ?? undefined,
          intervalMinutes: dto.intervalMinutes ?? (dto.intervalHours ? dto.intervalHours * 60 : undefined),
          minutesAfter: dto.minutesAfter ?? undefined,
          daysOfWeek: dto.daysOfWeek ?? undefined,
          title: dto.title ?? undefined,
          isEnabled: dto.isEnabled ?? true,
        };
        setForm(fv);
      } finally {
        setLoading(false);
      }
    })();
  }, [id, telegramId]);

  useEffect(() => {
    const h = (e: BeforeUnloadEvent) => {
      if (isDirty) {
        e.preventDefault();
        e.returnValue = "";
      }
    };
    window.addEventListener("beforeunload", h);
    return () => window.removeEventListener("beforeunload", h);
  }, [isDirty]);

  async function onSave(e: React.FormEvent) {
    e.preventDefault();
    if (!form) return;

    // –ø—Ä–æ—Å—Ç–∞—è —Ñ—Ä–æ–Ω—Ç-–≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (form.kind === "at_time" && !form.time) return alert("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM)");
    if (form.kind === "every" && (!form.intervalMinutes || form.intervalMinutes < 1))
      return alert("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (>=1)");
    if (form.kind === "after_event" && (!form.minutesAfter || form.minutesAfter < 1))
      return alert("–£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –µ–¥—ã (>=1 –º–∏–Ω)");

    try {
      const payload = { id: Number(id), ...buildReminderPayload({ ...form, telegramId }) };
      await api.remindersPatch(payload as any);
      setDirty(false);
      nav("/reminders");
    } catch (err: any) {
      const text = await err?.response?.text?.();
      console.error("PATCH /reminders failed", err?.response?.status, text);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");
    }
  }

  async function onDelete() {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?")) return;
    try {
      await api.remindersDelete({ telegramId, id: Number(id) } as any);
      nav("/reminders");
    } catch {
      alert("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å");
    }
  }

  if (loading || !form) return <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;

  const presetsTime = ["07:30", "12:30", "22:00"];
  const presetsEvery = [60, 120, 180, 1440];
  const presetsAfter = [90, 120, 150];

  return (
    <form className="max-w-xl mx-auto p-4 space-y-4" onSubmit={onSave}>
      <div className="flex items-center justify-between">
        <h1 className="text-xl font-semibold">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</h1>
        <button type="button" onClick={onDelete} className="px-3 py-2 rounded-lg border border-gray-300">
          üóë –£–¥–∞–ª–∏—Ç—å
        </button>
      </div>

      {/* –¢–∏–ø */}
      <label className="block text-sm font-medium">–¢–∏–ø</label>
      <select
        className="w-full border rounded-lg px-3 py-2"
        value={form.kind === "after_event" ? "after_meal" : form.type}
        onChange={(e) => onChange("type", e.target.value as ReminderType)}
        disabled={form.kind === "after_event"}
      >
        {TYPE_OPTIONS.map((o) => (
          <option key={o.value} value={o.value}>
            {o.label}
          </option>
        ))}
      </select>
      {form.kind === "after_event" && (
        <p className="text-xs text-gray-500">–°—Ä–∞–±–æ—Ç–∞–µ—Ç <b>–ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏</b> –≤ ¬´–ò—Å—Ç–æ—Ä–∏–∏¬ª.</p>
      )}

      {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
      <label className="block text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)</label>
      <input
        className="w-full border rounded-lg px-3 py-2"
        value={form.title ?? ""}
        onChange={(e) => onChange("title", e.target.value)}
      />

      {/* –†–µ–∂–∏–º */}
      <label className="block text-sm font-medium">–†–µ–∂–∏–º</label>
      <div className="flex gap-2">
        {KIND_OPTIONS.map((o) => (
          <button
            type="button"
            key={o.value}
            onClick={() => switchKind(o.value)}
            className={`px-3 py-1 rounded-2xl border ${
              form.kind === o.value ? "bg-black text-white border-black" : "border-gray-300"
            }`}
          >
            {o.label}
          </button>
        ))}
      </div>

      {/* –ü–æ–ª—è –ø–æ —Ä–µ–∂–∏–º—É */}
      {form.kind === "at_time" && (
        <>
          <label className="block text-sm font-medium">–í—Ä–µ–º—è (HH:MM)</label>
          <input
            type="time"
            className="w-full border rounded-lg px-3 py-2"
            value={form.time || ""}
            onChange={(e) => onChange("time", e.target.value)}
          />
          <div className="flex gap-2">
            {presetsTime.map((t) => (
              <button
                key={t}
                type="button"
                className="px-3 py-1 rounded-2xl border border-gray-300"
                onClick={() => onChange("time", t)}
              >
                {t}
              </button>
            ))}
          </div>
        </>
      )}

      {form.kind === "every" && (
        <>
          <label className="block text-sm font-medium">–ò–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω)</label>
          <input
            type="number"
            min={1}
            className="w-full border rounded-lg px-3 py-2"
            value={form.intervalMinutes ?? ""}
            onChange={(e) => onChange("intervalMinutes", Number(e.target.value || 0))}
          />
          <div className="flex gap-2">
            {presetsEvery.map((m) => (
              <button
                key={m}
                type="button"
                className="px-3 py-1 rounded-2xl border border-gray-300"
                onClick={() => onChange("intervalMinutes", m)}
              >
                {m} –º–∏–Ω
              </button>
            ))}
          </div>
        </>
      )}

      {form.kind === "after_event" && (
        <>
          <label className="block text-sm font-medium">–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –µ–¥—ã (–º–∏–Ω)</label>
          <input
            type="number"
            min={1}
            className="w-full border rounded-lg px-3 py-2"
            value={form.minutesAfter ?? ""}
            onChange={(e) => onChange("minutesAfter", Number(e.target.value || 0))}
          />
          <div className="flex gap-2">
            {presetsAfter.map((m) => (
              <button
                key={m}
                type="button"
                className="px-3 py-1 rounded-2xl border border-gray-300"
                onClick={() => onChange("minutesAfter", m)}
              >
                {m} –º–∏–Ω
              </button>
            ))}
          </div>
        </>
      )}

      {/* –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ */}
      <div>
        <label className="block text-sm font-medium mb-1">–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
        <DayOfWeekPicker value={form.daysOfWeek} onChange={(v) => onChange("daysOfWeek", v)} />
      </div>

      {/* –í–∫–ª/–í—ã–∫–ª */}
      <label className="inline-flex items-center gap-2">
        <input
          type="checkbox"
          checked={form.isEnabled ?? true}
          onChange={(e) => onChange("isEnabled", e.target.checked)}
        />
        –í–∫–ª—é—á–µ–Ω–æ
      </label>

      {/* –ü—Ä–µ–≤—å—é */}
      <div className="text-sm text-gray-700 border-t pt-3">{schedulePreview(form)}</div>

      {/* –ö–Ω–æ–ø–∫–∏ */}
      <div className="flex gap-2">
        <button className="flex-1 bg-black text-white rounded-xl py-3">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button
          type="button"
          className="flex-1 bg-gray-100 rounded-xl py-3"
          onClick={() => nav(-1)}
        >
          –û—Ç–º–µ–Ω–∞
        </button>
      </div>
    </form>
  );
}