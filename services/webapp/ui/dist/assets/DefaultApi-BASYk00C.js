var q=Object.defineProperty;var E=(r,e,t)=>e in r?q(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var c=(r,e,t)=>E(r,typeof e!="symbol"?e+"":e,t);const m={};var p={};const O=typeof import.meta<"u"&&(m==null?void 0:m.VITE_API_BASE)||typeof process<"u"&&(p==null?void 0:p.VITE_API_BASE)||"http://localhost",A=O.replace(/\/+$/,"");class D{constructor(e={}){this.configuration=e}set config(e){this.configuration=e}get basePath(){return this.configuration.basePath!=null?this.configuration.basePath:A}get fetchApi(){return this.configuration.fetchApi}get middleware(){return this.configuration.middleware||[]}get queryParamsStringify(){return this.configuration.queryParamsStringify||T}get username(){return this.configuration.username}get password(){return this.configuration.password}get apiKey(){const e=this.configuration.apiKey;if(e)return typeof e=="function"?e:()=>e}get accessToken(){const e=this.configuration.accessToken;if(e)return typeof e=="function"?e:async()=>e}get headers(){return this.configuration.headers}get credentials(){return this.configuration.credentials}}const J=new D,f=class f{constructor(e=J){c(this,"middleware");c(this,"fetchApi",async(e,t)=>{let n={url:e,init:t};for(const a of this.middleware)a.pre&&(n=await a.pre({fetch:this.fetchApi,...n})||n);let i;try{i=await(this.configuration.fetchApi||fetch)(n.url,n.init)}catch(a){for(const s of this.middleware)s.onError&&(i=await s.onError({fetch:this.fetchApi,url:n.url,init:n.init,error:a,response:i?i.clone():void 0})||i);if(i===void 0)throw a instanceof Error?new G(a,"The request failed and the interceptors did not return an alternative response"):a}for(const a of this.middleware)a.post&&(i=await a.post({fetch:this.fetchApi,url:n.url,init:n.init,response:i.clone()})||i);return i});this.configuration=e,this.middleware=e.middleware}withMiddleware(...e){const t=this.clone();return t.middleware=t.middleware.concat(...e),t}withPreMiddleware(...e){const t=e.map(n=>({pre:n}));return this.withMiddleware(...t)}withPostMiddleware(...e){const t=e.map(n=>({post:n}));return this.withMiddleware(...t)}isJsonMime(e){return e?f.jsonRegex.test(e):!1}async request(e,t){const{url:n,init:i}=await this.createFetchParams(e,t),a=await this.fetchApi(n,i);if(a&&a.status>=200&&a.status<300)return a;throw new C(a,"Response returned an error code")}async createFetchParams(e,t){let n=this.configuration.basePath+e.path;e.query!==void 0&&Object.keys(e.query).length!==0&&(n+="?"+this.configuration.queryParamsStringify(e.query));const i=Object.assign({},this.configuration.headers,e.headers);Object.keys(i).forEach(g=>i[g]===void 0?delete i[g]:{});const a=typeof t=="function"?t:async()=>t,s={method:e.method,headers:i,body:e.body,credentials:this.configuration.credentials},o={...s,...await a({init:s,context:e})};let u;F(o.body)||o.body instanceof URLSearchParams||N(o.body)?u=o.body:this.isJsonMime(i["Content-Type"])?u=JSON.stringify(o.body):u=o.body;const b={...o,body:u};return{url:n,init:b}}clone(){const e=this.constructor,t=new e(this.configuration);return t.middleware=this.middleware.slice(),t}};c(f,"jsonRegex",new RegExp("^(:?application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(:?;.*)?$","i"));let w=f;function N(r){return typeof Blob<"u"&&r instanceof Blob}function F(r){return typeof FormData<"u"&&r instanceof FormData}class C extends Error{constructor(t,n){super(n);c(this,"name","ResponseError");this.response=t}}class G extends Error{constructor(t,n){super(n);c(this,"name","FetchError");this.cause=t}}class d extends Error{constructor(t,n){super(n);c(this,"name","RequiredError");this.field=t}}function T(r,e=""){return Object.keys(r).map(t=>I(t,r[t],e)).filter(t=>t.length>0).join("&")}function I(r,e,t=""){const n=t+(t.length?`[${r}]`:r);if(e instanceof Array){const i=e.map(a=>encodeURIComponent(String(a))).join(`&${encodeURIComponent(n)}=`);return`${encodeURIComponent(n)}=${i}`}if(e instanceof Set){const i=Array.from(e);return I(r,i,t)}return e instanceof Date?`${encodeURIComponent(n)}=${encodeURIComponent(e.toISOString())}`:e instanceof Object?T(e,n):`${encodeURIComponent(n)}=${encodeURIComponent(String(e))}`}class l{constructor(e,t=n=>n){this.raw=e,this.transformer=t}async value(){return this.transformer(await this.raw.json())}}function z(r){return _(r)}function _(r,e){return r==null?r:{telegramId:r.telegram_id,icr:r.icr,cf:r.cf,target:r.target,low:r.low,high:r.high,orgId:r.org_id==null?void 0:r.org_id}}function $(r){return U(r,!1)}function U(r,e=!1){return r==null?r:{telegram_id:r.telegramId,icr:r.icr,cf:r.cf,target:r.target,low:r.low,high:r.high,org_id:r.orgId}}function y(r){return!(!("telegramId"in r)||r.telegramId===void 0||!("type"in r)||r.type===void 0)}function P(r,e){return r==null?r:{telegramId:r.telegram_id,id:r.id==null?void 0:r.id,type:r.type,time:r.time==null?void 0:r.time,intervalHours:r.interval_hours==null?void 0:r.interval_hours,isEnabled:r.is_enabled==null?void 0:r.is_enabled}}function R(r){return M(r,!1)}function M(r,e=!1){return r==null?r:{telegram_id:r.telegramId,id:r.id,type:r.type,time:r.time,interval_hours:r.intervalHours,is_enabled:r.isEnabled}}function B(r){return K(r)}function K(r,e){return r==null||typeof r!="object"?r:y(r)?P(r):Array.isArray(r)?r.every(t=>typeof t=="object")&&r.every(t=>y(t))?r.map(t=>P(t)):r:{}}function S(r){return H(r)}function H(r,e){return r==null?r:{status:r.status==null?void 0:r.status,id:r.id==null?void 0:r.id}}function h(r){return V(r)}function V(r,e){return r==null?r:{status:r.status}}function v(r){return L(r,!1)}function L(r,e=!1){return r==null?r:{telegram_id:r.telegramId,tz:r.tz}}class k extends w{async healthGetRaw(e){const t={},n={},a=await this.request({path:"/health",method:"GET",headers:n,query:t},e);return new l(a,s=>h(s))}async healthGet(e){return await(await this.healthGetRaw(e)).value()}async profilesGetRaw(e,t){if(e.telegramId==null)throw new d("telegramId",'Required parameter "telegramId" was null or undefined when calling profilesGet().');const n={};e.telegramId!=null&&(n.telegram_id=e.telegramId);const i={},s=await this.request({path:"/profiles",method:"GET",headers:i,query:n},t);return new l(s,o=>z(o))}async profilesGet(e,t){return await(await this.profilesGetRaw(e,t)).value()}async profilesPostRaw(e,t){if(e.profile==null)throw new d("profile",'Required parameter "profile" was null or undefined when calling profilesPost().');const n={},i={};i["Content-Type"]="application/json";const s=await this.request({path:"/profiles",method:"POST",headers:i,query:n,body:$(e.profile)},t);return new l(s,o=>h(o))}async profilesPost(e,t){return await(await this.profilesPostRaw(e,t)).value()}async remindersGetRaw(e,t){if(e.telegramId==null)throw new d("telegramId",'Required parameter "telegramId" was null or undefined when calling remindersGet().');const n={};e.telegramId!=null&&(n.telegram_id=e.telegramId),e.id!=null&&(n.id=e.id);const i={},s=await this.request({path:"/api/reminders",method:"GET",headers:i,query:n},t);return new l(s,o=>B(o))}async remindersGet(e,t){return await(await this.remindersGetRaw(e,t)).value()}async remindersPostRaw(e,t){if(e.reminder==null)throw new d("reminder",'Required parameter "reminder" was null or undefined when calling remindersPost().');const n={},i={};i["Content-Type"]="application/json";const s=await this.request({path:"/api/reminders",method:"POST",headers:i,query:n,body:R(e.reminder)},t);return new l(s,o=>S(o))}async remindersPost(e,t){return await(await this.remindersPostRaw(e,t)).value()}async remindersPatchRaw(e,t){if(e.reminder==null)throw new d("reminder",'Required parameter "reminder" was null or undefined when calling remindersPatch().');const n={},i={};i["Content-Type"]="application/json";const s=await this.request({path:"/api/reminders",method:"PATCH",headers:i,query:n,body:R(e.reminder)},t);return new l(s,o=>S(o))}async remindersPatch(e,t){return await(await this.remindersPatchRaw(e,t)).value()}async remindersDeleteRaw(e,t){if(e.telegramId==null)throw new d("telegramId",'Required parameter "telegramId" was null or undefined when calling remindersDelete().');if(e.id==null)throw new d("id",'Required parameter "id" was null or undefined when calling remindersDelete().');const n={};n.telegram_id=e.telegramId,n.id=e.id;const i={},s=await this.request({path:"/api/reminders",method:"DELETE",headers:i,query:n},t);return new l(s,o=>h(o))}async remindersDelete(e,t){return await(await this.remindersDeleteRaw(e,t)).value()}async timezonePostRaw(e,t){if(e.timezone==null)throw new d("timezone",'Required parameter "timezone" was null or undefined when calling timezonePost().');const n={},i={};i["Content-Type"]="application/json";const s=await this.request({path:"/timezone",method:"POST",headers:i,query:n,body:v(e.timezone)},t);return new l(s,o=>h(o))}async timezonePost(e,t){return await(await this.timezonePostRaw(e,t)).value()}}export{D as C,k as D,C as R};
