"""change description

Revision ID: 20250904_change_description
Revises: 20250903_add_timezone_auto_to_users
Create Date: 2025-09-04 10:37:36.590628

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "20250904_change_description"
down_revision: Union[str, None] = "20250903_add_timezone_auto_to_users"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('alerts') as batch_op:
        batch_op.alter_column(
            'resolved', existing_type=sa.BOOLEAN(), nullable=False
        )
    op.drop_index('ix_alerts_org_id', table_name='alerts')

    with op.batch_alter_table('entries') as batch_op:
        batch_op.alter_column(
            'created_at',
            existing_type=postgresql.TIMESTAMP(timezone=True),
            nullable=False,
            existing_server_default=sa.text('now()'),
        )
    op.drop_index('ix_entries_org_id', table_name='entries')

    # Indexes on ``history_records`` already exist in the initial migration.
    # Creating them again leads to "index already exists" errors on SQLite, so
    # we skip reâ€‘creation here.

    with op.batch_alter_table('profiles') as batch_op:
        batch_op.alter_column(
            'sos_alerts_enabled', existing_type=sa.BOOLEAN(), nullable=False
        )
    op.drop_index('ix_profiles_org_id', table_name='profiles')

    bind = op.get_bind()
    inspector = sa.inspect(bind)
    with op.batch_alter_table('reminder_logs') as batch_op:
        columns = {col['name'] for col in inspector.get_columns('reminder_logs')}
        if 'org_id' not in columns:
            batch_op.add_column(sa.Column('org_id', sa.Integer(), nullable=True))
        batch_op.alter_column(
            'event_time',
            existing_type=postgresql.TIMESTAMP(timezone=True),
            nullable=False,
            existing_server_default=sa.text('now()'),
        )

    with op.batch_alter_table('reminders') as batch_op:
        batch_op.alter_column(
            'title',
            existing_type=sa.TEXT(),
            server_default=None,
            type_=sa.String(),
            nullable=True,
        )
        batch_op.alter_column(
            'is_enabled', existing_type=sa.BOOLEAN(), nullable=False
        )
        batch_op.alter_column(
            'created_at',
            existing_type=postgresql.TIMESTAMP(timezone=True),
            nullable=False,
            existing_server_default=sa.text('now()'),
        )
    op.drop_index('ix_reminders_org_id', table_name='reminders')
    op.drop_index('ix_reminders_owner_enabled', table_name='reminders')

    op.create_index(op.f('ix_timezones_id'), 'timezones', ['id'], unique=False)

    bind = op.get_bind()
    inspector = sa.inspect(bind)
    user_cols = {col['name'] for col in inspector.get_columns('users')}
    with op.batch_alter_table('users') as batch_op:
        batch_op.alter_column(
            'onboarding_complete', existing_type=sa.BOOLEAN(), nullable=False
        )
        batch_op.alter_column('plan', existing_type=sa.VARCHAR(), nullable=False)
        if 'timezone' in user_cols:
            batch_op.alter_column(
                'timezone',
                existing_type=sa.VARCHAR(),
                server_default=None,
                existing_nullable=False,
            )
        if 'timezone_auto' in user_cols:
            batch_op.alter_column(
                'timezone_auto',
                existing_type=sa.BOOLEAN(),
                server_default=None,
                existing_nullable=False,
            )
        batch_op.alter_column(
            'created_at',
            existing_type=postgresql.TIMESTAMP(timezone=True),
            nullable=False,
            existing_server_default=sa.text('now()'),
        )
    op.drop_index('ix_users_org_id', table_name='users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_users_org_id', 'users', ['org_id'], unique=False)
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    user_cols = {col['name'] for col in inspector.get_columns('users')}
    with op.batch_alter_table('users') as batch_op:
        batch_op.alter_column(
            'created_at',
            existing_type=postgresql.TIMESTAMP(timezone=True),
            nullable=True,
            existing_server_default=sa.text('now()'),
        )
        if 'timezone_auto' in user_cols:
            batch_op.alter_column(
                'timezone_auto',
                existing_type=sa.BOOLEAN(),
                server_default=sa.text('true'),
                existing_nullable=False,
            )
        if 'timezone' in user_cols:
            batch_op.alter_column(
                'timezone',
                existing_type=sa.VARCHAR(),
                server_default=sa.text("'UTC'::character varying"),
                existing_nullable=False,
            )
        batch_op.alter_column('plan', existing_type=sa.VARCHAR(), nullable=True)
        batch_op.alter_column(
            'onboarding_complete', existing_type=sa.BOOLEAN(), nullable=True
        )
    op.drop_index(op.f('ix_timezones_id'), table_name='timezones')
    op.create_index('ix_reminders_owner_enabled', 'reminders', ['telegram_id', 'is_enabled'], unique=False)
    op.create_index('ix_reminders_org_id', 'reminders', ['org_id'], unique=False)
    with op.batch_alter_table('reminders') as batch_op:
        batch_op.alter_column(
            'created_at',
            existing_type=postgresql.TIMESTAMP(timezone=True),
            nullable=True,
            existing_server_default=sa.text('now()'),
        )
        batch_op.alter_column(
            'is_enabled', existing_type=sa.BOOLEAN(), nullable=True
        )
        batch_op.alter_column(
            'title',
            existing_type=sa.String(),
            server_default=sa.text("''::text"),
            type_=sa.TEXT(),
            nullable=False,
        )
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    with op.batch_alter_table('reminder_logs') as batch_op:
        batch_op.alter_column(
            'event_time',
            existing_type=postgresql.TIMESTAMP(timezone=True),
            nullable=True,
            existing_server_default=sa.text('now()'),
        )
        columns = {col['name'] for col in inspector.get_columns('reminder_logs')}
        if 'org_id' in columns:
            batch_op.drop_column('org_id')
    op.create_index('ix_profiles_org_id', 'profiles', ['org_id'], unique=False)
    with op.batch_alter_table('profiles') as batch_op:
        batch_op.alter_column(
            'sos_alerts_enabled', existing_type=sa.BOOLEAN(), nullable=True
        )
    # The corresponding indexes were never created in this migration; no drops
    # are required for SQLite compatibility.
    op.create_index('ix_entries_org_id', 'entries', ['org_id'], unique=False)
    with op.batch_alter_table('entries') as batch_op:
        batch_op.alter_column(
            'created_at',
            existing_type=postgresql.TIMESTAMP(timezone=True),
            nullable=True,
            existing_server_default=sa.text('now()'),
        )
    op.create_index('ix_alerts_org_id', 'alerts', ['org_id'], unique=False)
    with op.batch_alter_table('alerts') as batch_op:
        batch_op.alter_column(
            'resolved', existing_type=sa.BOOLEAN(), nullable=True
        )
    # ### end Alembic commands ###
