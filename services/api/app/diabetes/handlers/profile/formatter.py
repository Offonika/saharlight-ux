"""Utilities for formatting profile view message and keyboard."""

from __future__ import annotations

from datetime import time as dt_time
from typing import cast

from telegram import InlineKeyboardButton, InlineKeyboardMarkup


def profile_view_formatter(
    profile: object | None,
    webapp_button: list[InlineKeyboardButton] | None = None,
) -> tuple[str, InlineKeyboardMarkup | None]:
    """Build message text and keyboard for profile view."""
    if not profile:
        text = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        if webapp_button is not None:
            text += " –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
            keyboard = InlineKeyboardMarkup([webapp_button])
        else:
            keyboard = None
        return text, keyboard

    icr = cast(object | None, getattr(profile, "icr", None))
    cf = cast(object | None, getattr(profile, "cf", None))
    target = cast(object | None, getattr(profile, "target", None))
    low = cast(object | None, getattr(profile, "low", None))
    high = cast(object | None, getattr(profile, "high", None))
    dia = cast(object | None, getattr(profile, "dia", None))
    round_step = cast(object | None, getattr(profile, "round_step", None))
    carb_units = cast(object | None, getattr(profile, "carb_units", None))
    grams_per_xe = cast(object | None, getattr(profile, "grams_per_xe", None))
    therapy_type = cast(object | None, getattr(profile, "therapy_type", None))
    rapid_insulin_type = cast(object | None, getattr(profile, "rapid_insulin_type", None))
    if rapid_insulin_type is None:
        rapid_insulin_type = cast(object | None, getattr(profile, "insulin_type", None))
    prebolus_min = cast(object | None, getattr(profile, "prebolus_min", None))
    max_bolus = cast(object | None, getattr(profile, "max_bolus", None))
    postmeal_check_min = cast(object | None, getattr(profile, "postmeal_check_min", None))
    quiet_start = cast(dt_time | dict[str, int] | None, getattr(profile, "quiet_start", None))
    quiet_end = cast(dt_time | dict[str, int] | None, getattr(profile, "quiet_end", None))
    if isinstance(quiet_start, dict):
        quiet_start = dt_time(**quiet_start)
    if isinstance(quiet_end, dict):
        quiet_end = dt_time(**quiet_end)
    timezone = cast(object | None, getattr(profile, "timezone", None))
    sos_contact = cast(object | None, getattr(profile, "sos_contact", None))
    sos_alerts_enabled = cast(bool | None, getattr(profile, "sos_alerts_enabled", None))

    bolus_lines = []
    if icr is not None:
        bolus_lines.append(f"‚Ä¢ –ò–ö–•: {icr} –≥/–µ–¥.")
    if cf is not None:
        bolus_lines.append(f"‚Ä¢ –ö–ß: {cf} –º–º–æ–ª—å/–ª")
    if target is not None:
        bolus_lines.append(f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {target} –º–º–æ–ª—å/–ª")
    if low is not None:
        bolus_lines.append(f"‚Ä¢ –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥: {low} –º–º–æ–ª—å/–ª")
    if high is not None:
        bolus_lines.append(f"‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥: {high} –º–º–æ–ª—å/–ª")
    if dia is not None:
        bolus_lines.append(f"‚Ä¢ –î–∏–ê: {dia} —á")
    if round_step is not None:
        bolus_lines.append(f"‚Ä¢ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ: {round_step} –µ–¥.")
    if therapy_type is not None:
        bolus_lines.append(f"‚Ä¢ –¢–µ—Ä–∞–ø–∏—è: {therapy_type}")
    if rapid_insulin_type is not None:
        bolus_lines.append(f"‚Ä¢ –ò–Ω—Å—É–ª–∏–Ω: {rapid_insulin_type}")
    if prebolus_min is not None:
        bolus_lines.append(f"‚Ä¢ –ü—Ä–µ–±–æ–ª—é—Å: {prebolus_min} –º–∏–Ω")
    if max_bolus is not None:
        bolus_lines.append(f"‚Ä¢ –ú–∞–∫—Å. –±–æ–ª—é—Å: {max_bolus}")
    if postmeal_check_min is not None:
        bolus_lines.append(f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –µ–¥—ã: {postmeal_check_min} –º–∏–Ω")

    carb_lines: list[str] = []
    if carb_units is not None:
        carb_lines.append(f"‚Ä¢ –ï–¥. —É–≥–ª–µ–≤–æ–¥–æ–≤: {carb_units}")
    if grams_per_xe is not None:
        carb_lines.append(f"‚Ä¢ –ì—Ä–∞–º–º/–•–ï: {grams_per_xe}")

    safety_lines: list[str] = []
    if quiet_start and quiet_end:
        qs = quiet_start.strftime("%H:%M") if hasattr(quiet_start, "strftime") else str(quiet_start)
        qe = quiet_end.strftime("%H:%M") if hasattr(quiet_end, "strftime") else str(quiet_end)
        safety_lines.append(f"‚Ä¢ –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: {qs}-{qe}")
    if timezone is not None:
        safety_lines.append(f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}")
    if sos_contact is not None:
        safety_lines.append(f"‚Ä¢ SOS –∫–æ–Ω—Ç–∞–∫—Ç: {sos_contact}")
    if sos_alerts_enabled is not None:
        state = "–≤–∫–ª" if sos_alerts_enabled else "–≤—ã–∫–ª"
        safety_lines.append(f"‚Ä¢ SOS –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: {state}")

    sections: list[str] = []
    if bolus_lines:
        sections.append("üíâ *–ë–æ–ª—É—Å*\n" + "\n".join(bolus_lines))
    if carb_lines:
        sections.append("üçΩ *–£–≥–ª–µ–≤–æ–¥—ã*\n" + "\n".join(carb_lines))
    if safety_lines:
        sections.append("üõ° *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å*\n" + "\n".join(safety_lines))

    msg = "üìÑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n" + "\n\n".join(sections)
    rows = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="profile_edit")],
        [InlineKeyboardButton("üîî –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="profile_security")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_back")],
    ]
    if webapp_button is not None:
        rows.insert(1, webapp_button)
    keyboard = InlineKeyboardMarkup(rows)
    return msg, keyboard
