# file: diabetes/ui.py
"""
UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ ¬´Diabet Buddy¬ª.
–ó–¥–µ—Å—å –∂–∏–≤—É—Ç –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Reply –∏ Inline) –∏ –∏—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã.
–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é:

    from services.api.app.diabetes.utils.ui import (
        build_menu_keyboard,
        dose_keyboard,
        confirm_keyboard,
    )
"""

from telegram import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
)
from services.api.app.config import settings

__all__ = (
    "build_menu_keyboard",
    "dose_keyboard",
    "sugar_keyboard",
    "confirm_keyboard",
    "back_keyboard",
    "build_timezone_webapp_button",
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ —á–∞—Ç–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def build_menu_keyboard() -> ReplyKeyboardMarkup:
    """Create the main menu keyboard with optional WebApp buttons.

    A fresh ``ReplyKeyboardMarkup`` is returned on each call so that the
    ``WEBAPP_URL`` setting is read dynamically.
    """

    profile_button = (
        KeyboardButton(
            "üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", web_app=WebAppInfo(f"{settings.webapp_url}/profile")
        )
        if settings.webapp_url
        else KeyboardButton("üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    )
    reminders_button = (
        KeyboardButton(
            "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", web_app=WebAppInfo(f"{settings.webapp_url}/reminders")
        )
        if settings.webapp_url
        else KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    )

    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üì∑ –§–æ—Ç–æ –µ–¥—ã"), KeyboardButton("ü©∏ –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞")],
            [KeyboardButton("üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞"), KeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton("üìà –û—Ç—á—ë—Ç"), profile_button],
            [KeyboardButton("üïπ –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
            [reminders_button, KeyboardButton("üÜò SOS –∫–æ–Ω—Ç–∞–∫—Ç")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶",
    )

dose_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–•–ï"), KeyboardButton("–£–≥–ª–µ–≤–æ–¥—ã")],
        [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞‚Ä¶",
)

sugar_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True,
    one_time_keyboard=True,
    input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞‚Ä¶",
)

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è callback-–∞–º–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def confirm_keyboard(back_cb: str | None = None) -> InlineKeyboardMarkup:
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
        ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å | ‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å | ‚ùå –û—Ç–º–µ–Ω–∞ | üîô –ù–∞–∑–∞–¥ (–æ–ø—Ü.)

    Parameters
    ----------
    back_cb : str | None
        callback_data, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª.
        –ï—Å–ª–∏ None, –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è.
    """
    rows = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_entry"),
            InlineKeyboardButton("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å",  callback_data="edit_entry"),
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry"),
        ],
    ]
    if back_cb:
        rows.append(
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_cb)]
        )
    return InlineKeyboardMarkup(rows)


def build_timezone_webapp_button() -> InlineKeyboardButton | None:
    """Create a WebApp button for timezone detection if configured.

    Returns
    -------
    InlineKeyboardButton | None
        Button instance when ``WEBAPP_URL`` is set and valid, otherwise ``None``.
    """

    if not settings.webapp_url:
        return None

    return InlineKeyboardButton(
        "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        web_app=WebAppInfo(f"{settings.webapp_url}/timezone"),
    )
