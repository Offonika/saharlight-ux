# file: diabetes/ui.py
"""
UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ ¬´Diabet Buddy¬ª.
–ó–¥–µ—Å—å –∂–∏–≤—É—Ç –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Reply –∏ Inline) –∏ –∏—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã.
–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é:

    from services.api.app.diabetes.utils.ui import menu_keyboard, dose_keyboard, confirm_keyboard
"""

from telegram import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
)
from services.api.app import config

PROFILE_BUTTON_TEXT = "üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
REMINDERS_BUTTON_TEXT = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
PHOTO_BUTTON_TEXT = "üì∑ –§–æ—Ç–æ –µ–¥—ã"
SUGAR_BUTTON_TEXT = "ü©∏ –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞"
DOSE_BUTTON_TEXT = "üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞"
HISTORY_BUTTON_TEXT = "üìä –ò—Å—Ç–æ—Ä–∏—è"
REPORT_BUTTON_TEXT = "üìà –û—Ç—á—ë—Ç"
QUICK_INPUT_BUTTON_TEXT = "üïπ –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥"
HELP_BUTTON_TEXT = "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
SOS_BUTTON_TEXT = "üÜò SOS –∫–æ–Ω—Ç–∞–∫—Ç"
BACK_BUTTON_TEXT = "‚Ü©Ô∏è –ù–∞–∑–∞–¥"
XE_BUTTON_TEXT = "–•–ï"
CARBS_BUTTON_TEXT = "–£–≥–ª–µ–≤–æ–¥—ã"

__all__ = (
    "menu_keyboard",
    "dose_keyboard",
    "sugar_keyboard",
    "confirm_keyboard",
    "back_keyboard",
    "build_timezone_webapp_button",
    "PROFILE_BUTTON_TEXT",
    "REMINDERS_BUTTON_TEXT",
    "PHOTO_BUTTON_TEXT",
    "SUGAR_BUTTON_TEXT",
    "DOSE_BUTTON_TEXT",
    "HISTORY_BUTTON_TEXT",
    "REPORT_BUTTON_TEXT",
    "QUICK_INPUT_BUTTON_TEXT",
    "HELP_BUTTON_TEXT",
    "SOS_BUTTON_TEXT",
    "BACK_BUTTON_TEXT",
    "XE_BUTTON_TEXT",
    "CARBS_BUTTON_TEXT",
)


def _webapp_url() -> str | None:
    """Return ``settings.webapp_url`` without a trailing slash."""

    url = config.settings.webapp_url
    return url.rstrip("/") if url else None


def menu_keyboard() -> ReplyKeyboardMarkup:
    """Build the main menu keyboard.

    ``settings.webapp_url`` is read at call time to determine whether WebApp
    buttons should be used for profile and reminders.
    """

    webapp_url = _webapp_url()
    profile_button = (
        KeyboardButton(
            PROFILE_BUTTON_TEXT, web_app=WebAppInfo(f"{webapp_url}/profile")
        )
        if webapp_url
        else KeyboardButton(PROFILE_BUTTON_TEXT)
    )
    reminders_button = (
        KeyboardButton(
            REMINDERS_BUTTON_TEXT, web_app=WebAppInfo(f"{webapp_url}/reminders")
        )
        if webapp_url
        else KeyboardButton(REMINDERS_BUTTON_TEXT)
    )
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(PHOTO_BUTTON_TEXT), KeyboardButton(SUGAR_BUTTON_TEXT)],
            [KeyboardButton(DOSE_BUTTON_TEXT), KeyboardButton(HISTORY_BUTTON_TEXT)],
            [KeyboardButton(REPORT_BUTTON_TEXT), profile_button],
            [KeyboardButton(QUICK_INPUT_BUTTON_TEXT), KeyboardButton(HELP_BUTTON_TEXT)],
            [reminders_button, KeyboardButton(SOS_BUTTON_TEXT)],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶",
    )

dose_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(XE_BUTTON_TEXT), KeyboardButton(CARBS_BUTTON_TEXT)],
        [KeyboardButton(BACK_BUTTON_TEXT)],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞‚Ä¶",
)

sugar_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(BACK_BUTTON_TEXT)]],
    resize_keyboard=True,
    one_time_keyboard=True,
    input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞‚Ä¶",
)

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(BACK_BUTTON_TEXT)]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è callback-–∞–º–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def confirm_keyboard(back_cb: str | None = None) -> InlineKeyboardMarkup:
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
        ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å | ‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å | ‚ùå –û—Ç–º–µ–Ω–∞ | üîô –ù–∞–∑–∞–¥ (–æ–ø—Ü.)

    Parameters
    ----------
    back_cb : str | None
        callback_data, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª.
        –ï—Å–ª–∏ None, –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è.
    """
    rows = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_entry"),
            InlineKeyboardButton("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="edit_entry"),
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry"),
        ],
    ]
    if back_cb:
        rows.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_cb)])
    return InlineKeyboardMarkup(rows)


def build_timezone_webapp_button() -> InlineKeyboardButton | None:
    """Create a WebApp button for timezone detection if configured.

    Returns
    -------
    InlineKeyboardButton | None
        Button instance when ``WEBAPP_URL`` is set and valid, otherwise ``None``.
    """

    webapp_url = _webapp_url()
    if not webapp_url:
        return None

    return InlineKeyboardButton(
        "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        web_app=WebAppInfo(f"{webapp_url}/timezone"),
    )
