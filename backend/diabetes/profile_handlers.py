"""Handlers related to patient profile management."""

from __future__ import annotations

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from diabetes.callbackquery_no_warn_handler import CallbackQueryNoWarnHandler

from diabetes.db import SessionLocal, Profile, Alert, Reminder, User
from diabetes.alert_handlers import evaluate_sugar
from diabetes.ui import menu_keyboard, back_keyboard, build_timezone_webapp_button
from diabetes.config import WEBAPP_URL
from .common_handlers import commit_session
import diabetes.reminder_handlers as reminder_handlers
from zoneinfo import ZoneInfo
import json


PROFILE_ICR, PROFILE_CF, PROFILE_TARGET, PROFILE_LOW, PROFILE_HIGH, PROFILE_TZ = range(6)


async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle ``/profile`` command.

    * ``/profile`` ‚Üí start step-by-step profile setup (conversation)
    * ``/profile help`` ‚Üí show usage instructions
    * ``/profile <args>`` ‚Üí set profile directly
    """

    args = context.args

    # Ensure no pending sugar logging conversation captures profile input
    from .dose_handlers import sugar_conv
    chat_data = getattr(context, "chat_data", {})
    if chat_data.pop("sugar_active", None):
        end_conv = getattr(sugar_conv, "update_state", None)
        if callable(end_conv):
            end_conv(update, context, ConversationHandler.END)
        else:
            chat_id = getattr(update.effective_chat, "id", None) if sugar_conv.per_chat else None
            user_id = getattr(update.effective_user, "id", None) if sugar_conv.per_user else None
            msg_id = (
                getattr(update.effective_message, "message_id", None)
                if sugar_conv.per_message
                else None
            )
            key = (chat_id, user_id, msg_id)
            try:
                sugar_conv._update_state(ConversationHandler.END, key)
            except AttributeError:
                pass

    help_text = (
        "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
        "/profile <–ò–ö–• –≥/–µ–¥.> <–ö–ß –º–º–æ–ª—å/–ª> <—Ü–µ–ª–µ–≤–æ–π –º–º–æ–ª—å/–ª> <–Ω–∏–∑–∫–∏–π –º–º–æ–ª—å/–ª> <–≤—ã—Å–æ–∫–∏–π –º–º–æ–ª—å/–ª>\n"
        "–∏–ª–∏ /profile icr=<–ò–ö–•> cf=<–ö–ß> target=<—Ü–µ–ª–µ–≤–æ–π> low=<–Ω–∏–∑–∫–∏–π> high=<–≤—ã—Å–æ–∫–∏–π>\n"
        "–ü—Ä–∏–º–µ—Ä: /profile 10 2 6 4 9 ‚Äî –ò–ö–• 10 –≥/–µ–¥., –ö–ß 2 –º–º–æ–ª—å/–ª, —Ü–µ–ª–µ–≤–æ–π 6 –º–º–æ–ª—å/–ª, –Ω–∏–∑–∫–∏–π 4 –º–º–æ–ª—å/–ª, –≤—ã—Å–æ–∫–∏–π 9 –º–º–æ–ª—å/–ª"
    )

    if len(args) == 1 and args[0].lower() == "help":
        await update.message.reply_text(help_text, parse_mode="Markdown")
        return ConversationHandler.END

    if not args:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ò–ö–• (–≥/–µ–¥.) ‚Äî —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–æ–≤ —É–≥–ª–µ–≤–æ–¥–æ–≤ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç 1 –µ–¥. –±—ã—Å—Ç—Ä–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞:",
            reply_markup=back_keyboard,
        )
        return PROFILE_ICR

    values: dict[str, str] | None = None
    if len(args) == 5 and all("=" not in a for a in args):
        values = {
            "icr": args[0],
            "cf": args[1],
            "target": args[2],
            "low": args[3],
            "high": args[4],
        }
    else:
        parsed: dict[str, str] = {}
        for arg in args:
            if "=" not in arg:
                values = None
                break
            key, val = arg.split("=", 1)
            key = key.lower()
            match = None
            for full in ("icr", "cf", "target", "low", "high"):
                if full.startswith(key):
                    match = full
                    break
            if not match:
                values = None
                break
            parsed[match] = val
        else:
            if set(parsed) == {"icr", "cf", "target", "low", "high"}:
                values = parsed

    if values is None:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–∞–≤–∫–∞: /profile help")
        return ConversationHandler.END

    try:
        icr = float(values["icr"].replace(",", "."))
        cf = float(values["cf"].replace(",", "."))
        target = float(values["target"].replace(",", "."))
        low = float(values["low"].replace(",", "."))
        high = float(values["high"].replace(",", "."))
    except ValueError:
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞. –°–ø—Ä–∞–≤–∫–∞: /profile help"
        )
        return ConversationHandler.END

    if (
        icr <= 0
        or cf <= 0
        or target <= 0
        or low <= 0
        or high <= 0
        or low >= high
    ):
        await update.message.reply_text(
            "‚ùó –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ < –≤—ã—Å–æ–∫–∏–π. –°–ø—Ä–∞–≤–∫–∞: /profile help"
        )
        return ConversationHandler.END

    warning_msg = ""
    if icr > 8 or cf < 3:
        warning_msg = (
            "\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ –º–µ—Å—Ç–∞–º–∏ –ò–ö–• –∏ –ö–ß.\n"
            f"‚Ä¢ –í—ã –≤–≤–µ–ª–∏ –ò–ö–• = {icr} –≥/–µ–¥. (–≤—ã—Å–æ–∫–æ–≤–∞—Ç–æ)\n"
            f"‚Ä¢ –ö–ß = {cf} –º–º–æ–ª—å/–ª (–Ω–∏–∑–∫–æ–≤–∞—Ç–æ)\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            f"/profile {cf} {icr} {target} {low} {high}\n"
            f"(–ò–ö–• {cf}, –ö–ß {icr}, —Ü–µ–ª–µ–≤–æ–π {target}, –Ω–∏–∑–∫–∏–π {low}, –≤—ã—Å–æ–∫–∏–π {high})\n"
        )

    user_id = update.effective_user.id
    with SessionLocal() as session:
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)

        prof.icr = icr
        prof.cf = cf
        prof.target_bg = target
        prof.low_threshold = low
        prof.high_threshold = high
        if not commit_session(session):
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
            return ConversationHandler.END  # end conversation on failure

    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
        f"‚Ä¢ –ò–ö–•: {icr} –≥/–µ–¥.\n"
        f"‚Ä¢ –ö–ß: {cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {target} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥: {low} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥: {high} –º–º–æ–ª—å/–ª" + warning_msg,
        parse_mode="Markdown",
        reply_markup=menu_keyboard,
    )
    return ConversationHandler.END


async def profile_view(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Display current patient profile."""
    user_id = update.effective_user.id
    with SessionLocal() as session:
        profile = session.get(Profile, user_id)
        user = session.get(User, user_id)

    if not profile:
        await update.message.reply_text(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/profile <–ò–ö–• –≥/–µ–¥.> <–ö–ß –º–º–æ–ª—å/–ª> <—Ü–µ–ª–µ–≤–æ–π –º–º–æ–ª—å/–ª> <–Ω–∏–∑–∫–∏–π –º–º–æ–ª—å/–ª> <–≤—ã—Å–æ–∫–∏–π –º–º–æ–ª—å/–ª>\n"
            "–∏–ª–∏ /profile icr=<–ò–ö–•> cf=<–ö–ß> target=<—Ü–µ–ª–µ–≤–æ–π> low=<–Ω–∏–∑–∫–∏–π> high=<–≤—ã—Å–æ–∫–∏–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 10 2 6 4 9 ‚Äî –ò–ö–• 10 –≥/–µ–¥., –ö–ß 2 –º–º–æ–ª—å/–ª, —Ü–µ–ª–µ–≤–æ–π 6 –º–º–æ–ª—å/–ª, –Ω–∏–∑–∫–∏–π 4 –º–º–æ–ª—å/–ª, –≤—ã—Å–æ–∫–∏–π 9 –º–º–æ–ª—å/–ª",
            parse_mode="Markdown",
        )
        return

    tz = getattr(user, "timezone", "UTC") if user else "UTC"
    msg = (
        "üìÑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –ò–ö–•: {profile.icr} –≥/–µ–¥.\n"  # –ò–Ω—Å—É–ª–∏–Ω-–∫–∞—Ä–± –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        f"‚Ä¢ –ö–ß: {profile.cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {profile.target_bg} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥: {profile.low_threshold} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥: {profile.high_threshold} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz}"
    )
    rows = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="profile_edit")],
        [InlineKeyboardButton("üîî –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="profile_security")],
        [InlineKeyboardButton("üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="profile_timezone")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_back")],
    ]
    if WEBAPP_URL:
        rows.insert(
            1,
            [
                InlineKeyboardButton(
                    "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É",
                    web_app=WebAppInfo(f"{WEBAPP_URL}/profile"),
                )
            ],
        )
    keyboard = InlineKeyboardMarkup(rows)
    await update.message.reply_text(msg, reply_markup=keyboard)


async def profile_webapp_save(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Save profile data sent from the web app."""
    raw = update.effective_message.web_app_data.data
    error_msg = "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp."
    try:
        data = json.loads(raw)
    except json.JSONDecodeError:
        await update.effective_message.reply_text(
            error_msg, reply_markup=menu_keyboard
        )
        return
    if {
        "icr",
        "cf",
        "target",
        "low",
        "high",
    } - data.keys():
        await update.effective_message.reply_text(
            error_msg, reply_markup=menu_keyboard
        )
        return
    try:
        icr = float(str(data["icr"]).replace(",", "."))
        cf = float(str(data["cf"]).replace(",", "."))
        target = float(str(data["target"]).replace(",", "."))
        low = float(str(data["low"]).replace(",", "."))
        high = float(str(data["high"]).replace(",", "."))
    except ValueError:
        await update.effective_message.reply_text(
            error_msg, reply_markup=menu_keyboard
        )
        return
    if icr <= 0 or cf <= 0 or target <= 0 or low <= 0 or high <= 0 or low >= high:
        await update.effective_message.reply_text(
            "‚ùó –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ < –≤—ã—Å–æ–∫–∏–π.",
            reply_markup=menu_keyboard,
        )
        return
    user_id = update.effective_user.id
    with SessionLocal() as session:
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)
        prof.icr = icr
        prof.cf = cf
        prof.target_bg = target
        prof.low_threshold = low
        prof.high_threshold = high
        if not commit_session(session):
            await update.effective_message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=menu_keyboard,
            )
            return
    await update.effective_message.reply_text(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
        f"‚Ä¢ –ò–ö–•: {icr} –≥/–µ–¥.\n"
        f"‚Ä¢ –ö–ß: {cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {target} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥: {low} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥: {high} –º–º–æ–ª—å/–ª",
        reply_markup=menu_keyboard,
    )


async def profile_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel profile creation conversation."""
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END


async def profile_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Return to main menu from profile view."""
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    await query.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)


async def profile_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Prompt user to enter timezone."""
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä Europe/Moscow):",
        reply_markup=back_keyboard,
    )
    button = build_timezone_webapp_button()
    if button:
        keyboard = InlineKeyboardMarkup([[button]])
        await query.message.reply_text(
            "–ú–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:", reply_markup=keyboard
        )
    return PROFILE_TZ


async def profile_timezone_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Save user timezone from input."""
    raw = (
        update.message.web_app_data.data
        if getattr(update.message, "web_app_data", None)
        else update.message.text.strip()
    )
    if "–Ω–∞–∑–∞–¥" in raw.lower():
        return await profile_cancel(update, context)
    try:
        ZoneInfo(raw)
    except Exception:
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü—Ä–∏–º–µ—Ä: Europe/Moscow",
            reply_markup=back_keyboard,
        )
        button = build_timezone_webapp_button()
        if button:
            keyboard = InlineKeyboardMarkup([[button]])
            await update.message.reply_text(
                "–ú–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:", reply_markup=keyboard
            )
        return PROFILE_TZ
    user_id = update.effective_user.id
    with SessionLocal() as session:
        user = session.get(User, user_id)
        if not user:
            await update.message.reply_text(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=menu_keyboard
            )
            return ConversationHandler.END
        user.timezone = raw
        if not commit_session(session):
            await update.message.reply_text(

                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.",

                reply_markup=menu_keyboard,
            )
            return ConversationHandler.END
    await update.message.reply_text(
        "‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=menu_keyboard
    )
    return ConversationHandler.END


async def profile_security(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Display and modify security settings."""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    action = query.data.split(":", 1)[1] if ":" in query.data else None

    if action == "sos_contact":
        from diabetes import sos_handlers

        await sos_handlers.sos_contact_start(update.callback_query, context)
        return

    with SessionLocal() as session:
        profile = session.get(Profile, user_id)
        user = session.get(User, user_id)
        if not profile:
            await query.edit_message_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        changed = False
        if action == "low_inc":
            new = (profile.low_threshold or 0) + 0.5
            if profile.high_threshold is None or new < profile.high_threshold:
                profile.low_threshold = new
                changed = True
        elif action == "low_dec":
            new = (profile.low_threshold or 0) - 0.5
            if new > 0:
                profile.low_threshold = new
                changed = True
        elif action == "high_inc":
            new = (profile.high_threshold or 0) + 0.5
            profile.high_threshold = new
            changed = True
        elif action == "high_dec":
            new = (profile.high_threshold or 0) - 0.5
            if profile.low_threshold is None or new > profile.low_threshold:
                profile.high_threshold = new
                changed = True
        elif action == "toggle_sos":
            profile.sos_alerts_enabled = not profile.sos_alerts_enabled
            changed = True
        elif action == "add":
            if WEBAPP_URL:
                button = InlineKeyboardButton(
                    "üìù –ù–æ–≤–æ–µ", web_app=WebAppInfo(f"{WEBAPP_URL}/reminders")
                )
                keyboard = InlineKeyboardMarkup([[button]])
                await query.message.reply_text(
                    "–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", reply_markup=keyboard
                )
        elif action == "del":
            await reminder_handlers.delete_reminder(update, context)

        if changed:
            if not commit_session(session):
                await query.message.reply_text(

                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    reply_markup=menu_keyboard,

                )
                return
            alert = (
                session.query(Alert)
                .filter_by(user_id=user_id)
                .order_by(Alert.ts.desc())
                .first()
            )
            if alert:
                await evaluate_sugar(
                    user_id, alert.sugar, context.application.job_queue
                )

        low = profile.low_threshold or 0
        high = profile.high_threshold or 0
        sos = "–≤–∫–ª" if profile.sos_alerts_enabled else "–≤—ã–∫–ª"
        rems = session.query(Reminder).filter_by(telegram_id=user_id).all()
        rem_text = (
            "\n".join(
                f"{r.id}. {reminder_handlers._describe(r, user)}" for r in rems
            )
            if rems
            else "–Ω–µ—Ç"
        )
        text = (
            "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
            f"–ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥: {low:.1f} –º–º–æ–ª—å/–ª\n"
            f"–í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥: {high:.1f} –º–º–æ–ª—å/–ª\n"
            f"SOS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {sos}\n\n"
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{rem_text}"
        )
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("–ù–∏–∑–∫–∏–π -0.5", callback_data="profile_security:low_dec"),
                    InlineKeyboardButton("–ù–∏–∑–∫–∏–π +0.5", callback_data="profile_security:low_inc"),
                ],
                [
                    InlineKeyboardButton("–í—ã—Å–æ–∫–∏–π -0.5", callback_data="profile_security:high_dec"),
                    InlineKeyboardButton("–í—ã—Å–æ–∫–∏–π +0.5", callback_data="profile_security:high_inc"),
                ],
                [
                    InlineKeyboardButton(
                        f"SOS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'off' if profile.sos_alerts_enabled else 'on'}",
                        callback_data="profile_security:toggle_sos",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "SOS –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="profile_security:sos_contact"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="profile_security:add"
                    ),
                    InlineKeyboardButton(
                        "üóë –£–¥–∞–ª–∏—Ç—å", callback_data="profile_security:del"
                    ),
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_back")],
            ]
        )
    await query.edit_message_text(text, reply_markup=keyboard)


async def profile_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start step-by-step profile setup."""
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    await query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ò–ö–• (–≥/–µ–¥.) ‚Äî —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–æ–≤ —É–≥–ª–µ–≤–æ–¥–æ–≤ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç 1 –µ–¥. –±—ã—Å—Ç—Ä–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞:",
        reply_markup=back_keyboard,
    )
    return PROFILE_ICR


async def profile_icr(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle ICR input."""
    raw_text = update.message.text.strip()
    if "–Ω–∞–∑–∞–¥" in raw_text.lower():
        return await profile_cancel(update, context)
    text = raw_text.replace(",", ".")
    try:
        icr = float(text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ò–ö–• —á–∏—Å–ª–æ–º.", reply_markup=back_keyboard)
        return PROFILE_ICR
    if icr <= 0:
        await update.message.reply_text("–ò–ö–• –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", reply_markup=back_keyboard)
        return PROFILE_ICR
    context.user_data["profile_icr"] = icr
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ö–ß) –º–º–æ–ª—å/–ª ‚Äî –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º–º–æ–ª—å/–ª 1 –µ–¥. –∏–Ω—Å—É–ª–∏–Ω–∞ —Å–Ω–∏–∂–∞–µ—Ç —Å–∞—Ö–∞—Ä:",
        reply_markup=back_keyboard,
    )
    return PROFILE_CF


async def profile_cf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle CF input."""
    raw_text = update.message.text.strip()
    if "–Ω–∞–∑–∞–¥" in raw_text.lower():
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ò–ö–• (–≥/–µ–¥.) ‚Äî —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–æ–≤ —É–≥–ª–µ–≤–æ–¥–æ–≤ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç 1 –µ–¥. –±—ã—Å—Ç—Ä–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞:",
            reply_markup=back_keyboard,
        )
        return PROFILE_ICR
    text = raw_text.replace(",", ".")
    try:
        cf = float(text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ö–ß —á–∏—Å–ª–æ–º.", reply_markup=back_keyboard)
        return PROFILE_CF
    if cf <= 0:
        await update.message.reply_text("–ö–ß –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", reply_markup=back_keyboard)
        return PROFILE_CF
    context.user_data["profile_cf"] = cf
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª) ‚Äî –∫ –∫–∞–∫–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤—ã —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å:",
        reply_markup=back_keyboard,
    )
    return PROFILE_TARGET


async def profile_target(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle target BG input."""
    raw_text = update.message.text.strip()
    if "–Ω–∞–∑–∞–¥" in raw_text.lower():
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ö–ß) –º–º–æ–ª—å/–ª ‚Äî –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º–º–æ–ª—å/–ª 1 –µ–¥. –∏–Ω—Å—É–ª–∏–Ω–∞ —Å–Ω–∏–∂–∞–µ—Ç —Å–∞—Ö–∞—Ä:",
            reply_markup=back_keyboard,
        )
        return PROFILE_CF
    text = raw_text.replace(",", ".")
    try:
        target = float(text)
    except ValueError:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä —á–∏—Å–ª–æ–º.", reply_markup=back_keyboard
        )
        return PROFILE_TARGET
    if target <= 0:
        await update.message.reply_text(
            "–¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", reply_markup=back_keyboard
        )
        return PROFILE_TARGET
    context.user_data["profile_target"] = target
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª) ‚Äî –Ω–∏–∂–µ –Ω–µ–≥–æ –±–æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –æ –≥–∏–ø–æ–≥–ª–∏–∫–µ–º–∏–∏:",
        reply_markup=back_keyboard,
    )
    return PROFILE_LOW


async def profile_low(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle low threshold input."""
    raw_text = update.message.text.strip()
    if "–Ω–∞–∑–∞–¥" in raw_text.lower():
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª) ‚Äî –∫ –∫–∞–∫–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤—ã —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å:",
            reply_markup=back_keyboard,
        )
        return PROFILE_TARGET
    text = raw_text.replace(",", ".")
    try:
        low = float(text)
    except ValueError:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ —á–∏—Å–ª–æ–º.", reply_markup=back_keyboard
        )
        return PROFILE_LOW
    if low <= 0:
        await update.message.reply_text(
            "–ù–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", reply_markup=back_keyboard
        )
        return PROFILE_LOW
    context.user_data["profile_low"] = low
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª) ‚Äî –≤—ã—à–µ –Ω–µ–≥–æ –±–æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –æ –≥–∏–ø–µ—Ä–≥–ª–∏–∫–µ–º–∏–∏:",
        reply_markup=back_keyboard,
    )
    return PROFILE_HIGH


async def profile_high(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle high threshold input and save profile."""
    raw_text = update.message.text.strip()
    if "–Ω–∞–∑–∞–¥" in raw_text.lower():
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª) ‚Äî –Ω–∏–∂–µ –Ω–µ–≥–æ –±–æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –æ –≥–∏–ø–æ–≥–ª–∏–∫–µ–º–∏–∏:",
            reply_markup=back_keyboard,
        )
        return PROFILE_LOW
    text = raw_text.replace(",", ".")
    try:
        high = float(text)
    except ValueError:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ —á–∏—Å–ª–æ–º.", reply_markup=back_keyboard
        )
        return PROFILE_HIGH
    low = context.user_data.get("profile_low")
    if high <= 0 or low is None or high <= low:
        await update.message.reply_text(
            "–í–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω–∏–∂–Ω–µ–≥–æ –∏ –±–æ–ª—å—à–µ 0.",
            reply_markup=back_keyboard,
        )
        return PROFILE_HIGH
    icr = context.user_data.pop("profile_icr")
    cf = context.user_data.pop("profile_cf")
    target = context.user_data.pop("profile_target")
    context.user_data.pop("profile_low")
    user_id = update.effective_user.id
    with SessionLocal() as session:
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)
        prof.icr = icr
        prof.cf = cf
        prof.target_bg = target
        prof.low_threshold = low
        prof.high_threshold = high
        if not commit_session(session):
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
            return ConversationHandler.END
    warning_msg = ""
    if icr > 8 or cf < 3:
        warning_msg = (
            "\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ –º–µ—Å—Ç–∞–º–∏ –ò–ö–• –∏ –ö–ß.\n"
            f"‚Ä¢ –í—ã –≤–≤–µ–ª–∏ –ò–ö–• = {icr} –≥/–µ–¥. (–≤—ã—Å–æ–∫–æ–≤–∞—Ç–æ)\n"
            f"‚Ä¢ –ö–ß = {cf} –º–º–æ–ª—å/–ª (–Ω–∏–∑–∫–æ–≤–∞—Ç–æ)\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            f"/profile {cf} {icr} {target} {low} {high}\n"
            f"(–ò–ö–• {cf}, –ö–ß {icr}, —Ü–µ–ª–µ–≤–æ–π {target}, –Ω–∏–∑–∫–∏–π {low}, –≤—ã—Å–æ–∫–∏–π {high})\n"
        )
    await update.message.reply_text(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
        f"‚Ä¢ –ò–ö–•: {icr} –≥/–µ–¥.\n"
        f"‚Ä¢ –ö–ß: {cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {target} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥: {low} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥: {high} –º–º–æ–ª—å/–ª" + warning_msg,
        reply_markup=menu_keyboard,
    )
    return ConversationHandler.END


async def _photo_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from .dose_handlers import _cancel_then, photo_prompt

    handler = _cancel_then(photo_prompt)
    return await handler(update, context)


profile_conv = ConversationHandler(
    entry_points=[
        CommandHandler("profile", profile_command),
        CallbackQueryNoWarnHandler(profile_edit, pattern="^profile_edit$"),
        CallbackQueryNoWarnHandler(profile_timezone, pattern="^profile_timezone$"),
    ],
    states={
        PROFILE_ICR: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_icr)],
        PROFILE_CF: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_cf)],
        PROFILE_TARGET: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, profile_target)
        ],
        PROFILE_LOW: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, profile_low)
        ],
        PROFILE_HIGH: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, profile_high)
        ],
        PROFILE_TZ: [
            MessageHandler(
                (filters.TEXT & ~filters.COMMAND) | filters.StatusUpdate.WEB_APP_DATA,
                profile_timezone_save,
            )
        ],
    },
    fallbacks=[
        MessageHandler(filters.Regex("^‚Ü©Ô∏è –ù–∞–∑–∞–¥$"), profile_cancel),
        CommandHandler("cancel", profile_cancel),
        MessageHandler(filters.Regex("^üì∑ –§–æ—Ç–æ –µ–¥—ã$"), _photo_fallback),
    ],
    # Subsequent steps depend on ``MessageHandler`` for text inputs. Enabling
    # ``per_message=True`` would store state per message and reset the
    # conversation after each reply, so we keep per-chat tracking.
    per_message=False,
)


profile_webapp_handler = MessageHandler(
    filters.StatusUpdate.WEB_APP_DATA, profile_webapp_save
)


__all__ = [
    "profile_command",
    "profile_view",
    "profile_cancel",
    "profile_back",
    "profile_security",
    "profile_timezone",
    "profile_edit",
    "profile_conv",
    "profile_webapp_save",
    "profile_webapp_handler",
]
