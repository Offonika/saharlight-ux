# coding: utf-8

"""
Diabetes Assistant API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class ReminderSchema(BaseModel):
    """
    ReminderSchema
    """  # noqa: E501

    telegram_id: StrictInt = Field(alias="telegramId")
    id: Optional[StrictInt] = None
    type: StrictStr
    title: Optional[StrictStr] = None
    time: Optional[StrictStr] = None
    interval_hours: Optional[StrictInt] = Field(default=None, alias="intervalHours")
    minutes_after: Optional[StrictInt] = Field(default=None, alias="minutesAfter")
    is_enabled: Optional[StrictBool] = Field(default=True, alias="isEnabled")
    org_id: Optional[StrictInt] = Field(default=None, alias="orgId")
    __properties: ClassVar[List[str]] = [
        "telegramId",
        "id",
        "type",
        "title",
        "time",
        "intervalHours",
        "minutesAfter",
        "isEnabled",
        "orgId",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReminderSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict["id"] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict["title"] = None

        # set to None if time (nullable) is None
        # and model_fields_set contains the field
        if self.time is None and "time" in self.model_fields_set:
            _dict["time"] = None

        # set to None if interval_hours (nullable) is None
        # and model_fields_set contains the field
        if self.interval_hours is None and "interval_hours" in self.model_fields_set:
            _dict["intervalHours"] = None

        # set to None if minutes_after (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_after is None and "minutes_after" in self.model_fields_set:
            _dict["minutesAfter"] = None

        # set to None if org_id (nullable) is None
        # and model_fields_set contains the field
        if self.org_id is None and "org_id" in self.model_fields_set:
            _dict["orgId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReminderSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "telegramId": obj.get("telegramId"),
                "id": obj.get("id"),
                "type": obj.get("type"),
                "title": obj.get("title"),
                "time": obj.get("time"),
                "intervalHours": obj.get("intervalHours"),
                "minutesAfter": obj.get("minutesAfter"),
                "isEnabled": (
                    obj.get("isEnabled") if obj.get("isEnabled") is not None else True
                ),
                "orgId": obj.get("orgId"),
            }
        )
        return _obj
