# coding: utf-8

"""
    Diabetes Assistant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class HistoryRecordSchemaInput(BaseModel):
    """
    Schema for user history records.
    """ # noqa: E501
    id: StrictStr
    var_date: date = Field(alias="date")
    time: Annotated[str, Field(strict=True)]
    sugar: Optional[Union[StrictFloat, StrictInt]] = None
    carbs: Optional[Union[StrictFloat, StrictInt]] = None
    bread_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="breadUnits")
    insulin: Optional[Union[StrictFloat, StrictInt]] = None
    notes: Optional[StrictStr] = None
    type: StrictStr
    __properties: ClassVar[List[str]] = ["id", "date", "time", "sugar", "carbs", "breadUnits", "insulin", "notes", "type"]

    @field_validator('time')
    def time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{2}:\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{2}:\d{2}$/")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['measurement', 'meal', 'insulin']):
            raise ValueError("must be one of enum values ('measurement', 'meal', 'insulin')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HistoryRecordSchemaInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if sugar (nullable) is None
        # and model_fields_set contains the field
        if self.sugar is None and "sugar" in self.model_fields_set:
            _dict['sugar'] = None

        # set to None if carbs (nullable) is None
        # and model_fields_set contains the field
        if self.carbs is None and "carbs" in self.model_fields_set:
            _dict['carbs'] = None

        # set to None if bread_units (nullable) is None
        # and model_fields_set contains the field
        if self.bread_units is None and "bread_units" in self.model_fields_set:
            _dict['breadUnits'] = None

        # set to None if insulin (nullable) is None
        # and model_fields_set contains the field
        if self.insulin is None and "insulin" in self.model_fields_set:
            _dict['insulin'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HistoryRecordSchemaInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "date": obj.get("date"),
            "time": obj.get("time"),
            "sugar": obj.get("sugar"),
            "carbs": obj.get("carbs"),
            "breadUnits": obj.get("breadUnits"),
            "insulin": obj.get("insulin"),
            "notes": obj.get("notes"),
            "type": obj.get("type")
        })
        return _obj


