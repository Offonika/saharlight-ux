/* tslint:disable */
/* eslint-disable */
/**
 * Diabetes Assistant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventPayload,
  HTTPValidationError,
  OnboardingStatusResponse,
  ResponseOnboardingEventsPost,
} from '../models/index';
import {
    EventPayloadFromJSON,
    EventPayloadToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    OnboardingStatusResponseFromJSON,
    OnboardingStatusResponseToJSON,
    ResponseOnboardingEventsPostFromJSON,
    ResponseOnboardingEventsPostToJSON,
} from '../models/index';

export interface OnboardingEventsPostRequest {
    eventPayload: EventPayload;
}

/**
 * 
 */
export class OnboardingApi extends runtime.BaseAPI {

    /**
     * Onboarding Events Post
     */
    async onboardingEventsPostRaw(requestParameters: OnboardingEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseOnboardingEventsPost>> {
        if (requestParameters['eventPayload'] == null) {
            throw new runtime.RequiredError(
                'eventPayload',
                'Required parameter "eventPayload" was null or undefined when calling onboardingEventsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // telegramInitData authentication
        }


        let urlPath = `/onboarding/events`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventPayloadToJSON(requestParameters['eventPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseOnboardingEventsPostFromJSON(jsonValue));
    }

    /**
     * Onboarding Events Post
     */
    async onboardingEventsPost(requestParameters: OnboardingEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseOnboardingEventsPost> {
        const response = await this.onboardingEventsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Onboarding Status Get
     */
    async onboardingStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OnboardingStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // telegramInitData authentication
        }


        let urlPath = `/onboarding/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OnboardingStatusResponseFromJSON(jsonValue));
    }

    /**
     * Onboarding Status Get
     */
    async onboardingStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OnboardingStatusResponse> {
        const response = await this.onboardingStatusGetRaw(initOverrides);
        return await response.value();
    }

}
