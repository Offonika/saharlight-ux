/* tslint:disable */
/* eslint-disable */
/**
 * Diabetes Assistant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  HTTPValidationError,
  ProfileSchema,
  ProfileSettingsIn,
  ProfileSettingsOut,
} from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  ProfileSchemaFromJSON,
  ProfileSchemaToJSON,
  ProfileSettingsInFromJSON,
  ProfileSettingsInToJSON,
  ProfileSettingsOutFromJSON,
  ProfileSettingsOutToJSON,
} from "../models/index";

export interface ProfilePatchRequest {
  profileSettingsIn: ProfileSettingsIn;
  deviceTz?: string;
}

export interface ProfilesGetRequest {
  telegramId: number;
}

export interface ProfilesPostRequest {
  profileSchema: ProfileSchema;
}

/**
 *
 */
export class ProfilesApi extends runtime.BaseAPI {
  /**
   * Profile Patch
   */
  async profilePatchRaw(
    requestParameters: ProfilePatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProfileSettingsOut>> {
    if (requestParameters["profileSettingsIn"] == null) {
      throw new runtime.RequiredError(
        "profileSettingsIn",
        'Required parameter "profileSettingsIn" was null or undefined when calling profilePatch().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["deviceTz"] != null) {
      queryParameters["deviceTz"] = requestParameters["deviceTz"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // telegramInitData authentication
    }

    let urlPath = `/profile`;

    const response = await this.request(
      {
        path: urlPath,
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: ProfileSettingsInToJSON(requestParameters["profileSettingsIn"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProfileSettingsOutFromJSON(jsonValue),
    );
  }

  /**
   * Profile Patch
   */
  async profilePatch(
    requestParameters: ProfilePatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProfileSettingsOut> {
    const response = await this.profilePatchRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Profiles Get
   */
  async profilesGetRaw(
    requestParameters: ProfilesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProfileSettingsOut>> {
    if (requestParameters["telegramId"] == null) {
      throw new runtime.RequiredError(
        "telegramId",
        'Required parameter "telegramId" was null or undefined when calling profilesGet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["telegramId"] != null) {
      queryParameters["telegramId"] = requestParameters["telegramId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // telegramInitData authentication
    }

    let urlPath = `/profiles`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProfileSettingsOutFromJSON(jsonValue),
    );
  }

  /**
   * Profiles Get
   */
  async profilesGet(
    requestParameters: ProfilesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProfileSettingsOut> {
    const response = await this.profilesGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Profiles Post
   */
  async profilesPostRaw(
    requestParameters: ProfilesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProfileSchema>> {
    if (requestParameters["profileSchema"] == null) {
      throw new runtime.RequiredError(
        "profileSchema",
        'Required parameter "profileSchema" was null or undefined when calling profilesPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // telegramInitData authentication
    }

    let urlPath = `/profiles`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ProfileSchemaToJSON(requestParameters["profileSchema"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProfileSchemaFromJSON(jsonValue),
    );
  }

  /**
   * Profiles Post
   */
  async profilesPost(
    requestParameters: ProfilesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProfileSchema> {
    const response = await this.profilesPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
