/* tslint:disable */
/* eslint-disable */
/**
 * Diabetes Assistant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  HistoryRecordSchemaInput,
  HistoryRecordSchemaOutput,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HistoryRecordSchemaInputFromJSON,
    HistoryRecordSchemaInputToJSON,
    HistoryRecordSchemaOutputFromJSON,
    HistoryRecordSchemaOutputToJSON,
} from '../models/index';

export interface HistoryGetRequest {
    xTelegramInitData?: string | null;
}

export interface HistoryIdDeleteRequest {
    id: string;
    xTelegramInitData?: string | null;
}

export interface HistoryPostRequest {
    historyRecordSchemaInput: HistoryRecordSchemaInput;
    xTelegramInitData?: string | null;
}

/**
 * 
 */
export class HistoryApi extends runtime.BaseAPI {

    /**
     * Return history records for the authenticated user.
     * Get History
     */
    async historyGetRaw(requestParameters: HistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HistoryRecordSchemaOutput>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/history`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HistoryRecordSchemaOutputFromJSON));
    }

    /**
     * Return history records for the authenticated user.
     * Get History
     */
    async historyGet(requestParameters: HistoryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HistoryRecordSchemaOutput>> {
        const response = await this.historyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a history record after verifying ownership.
     * Delete History
     */
    async historyIdDeleteRaw(requestParameters: HistoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling historyIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/history/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a history record after verifying ownership.
     * Delete History
     */
    async historyIdDelete(requestParameters: HistoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }> {
        const response = await this.historyIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save or update a history record in the database.
     * Post History
     */
    async historyPostRaw(requestParameters: HistoryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>> {
        if (requestParameters['historyRecordSchemaInput'] == null) {
            throw new runtime.RequiredError(
                'historyRecordSchemaInput',
                'Required parameter "historyRecordSchemaInput" was null or undefined when calling historyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/history`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HistoryRecordSchemaInputToJSON(requestParameters['historyRecordSchemaInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Save or update a history record in the database.
     * Post History
     */
    async historyPost(requestParameters: HistoryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }> {
        const response = await this.historyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
