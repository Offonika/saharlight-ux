/* tslint:disable */
/* eslint-disable */
/**
 * Diabetes Assistant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyticsPoint,
  DayStats,
  HTTPValidationError,
  RoleSchema,
  Timezone,
  UserContext,
  WebUser,
} from '../models/index';
import {
    AnalyticsPointFromJSON,
    AnalyticsPointToJSON,
    DayStatsFromJSON,
    DayStatsToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RoleSchemaFromJSON,
    RoleSchemaToJSON,
    TimezoneFromJSON,
    TimezoneToJSON,
    UserContextFromJSON,
    UserContextToJSON,
    WebUserFromJSON,
    WebUserToJSON,
} from '../models/index';

export interface CreateUserUserPostRequest {
    webUser: WebUser;
    xTelegramInitData?: string | null;
}

export interface GetAnalyticsAnalyticsGetRequest {
    telegramId: number;
    xTelegramInitData?: string | null;
}

export interface GetRoleUserUserIdRoleGetRequest {
    userId: number;
}

export interface GetStatsStatsGetRequest {
    telegramId: number;
    xTelegramInitData?: string | null;
}

export interface GetTimezoneTimezoneGetRequest {
    xTelegramInitData?: string | null;
}

export interface ProfileSelfProfileSelfGetRequest {
    xTelegramInitData?: string | null;
}

export interface PutRoleUserUserIdRolePutRequest {
    userId: number;
    roleSchema: RoleSchema;
}

export interface PutTimezoneTimezonePutRequest {
    timezone: Timezone;
    xTelegramInitData?: string | null;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Ensure a user exists in the database.
     * Create User
     */
    async createUserUserPostRaw(requestParameters: CreateUserUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['webUser'] == null) {
            throw new runtime.RequiredError(
                'webUser',
                'Required parameter "webUser" was null or undefined when calling createUserUserPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/user`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebUserToJSON(requestParameters['webUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Ensure a user exists in the database.
     * Create User
     */
    async createUserUserPost(requestParameters: CreateUserUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.createUserUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Analytics
     */
    async getAnalyticsAnalyticsGetRaw(requestParameters: GetAnalyticsAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AnalyticsPoint>>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling getAnalyticsAnalyticsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegramId'] = requestParameters['telegramId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/analytics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnalyticsPointFromJSON));
    }

    /**
     * Get Analytics
     */
    async getAnalyticsAnalyticsGet(requestParameters: GetAnalyticsAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AnalyticsPoint>> {
        const response = await this.getAnalyticsAnalyticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Role
     */
    async getRoleUserUserIdRoleGetRaw(requestParameters: GetRoleUserUserIdRoleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleSchema>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getRoleUserUserIdRoleGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/user/{user_id}/role`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleSchemaFromJSON(jsonValue));
    }

    /**
     * Get Role
     */
    async getRoleUserUserIdRoleGet(requestParameters: GetRoleUserUserIdRoleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleSchema> {
        const response = await this.getRoleUserUserIdRoleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Stats
     */
    async getStatsStatsGetRaw(requestParameters: GetStatsStatsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayStats>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling getStatsStatsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegramId'] = requestParameters['telegramId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayStatsFromJSON(jsonValue));
    }

    /**
     * Get Stats
     */
    async getStatsStatsGet(requestParameters: GetStatsStatsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayStats | null | undefined > {
        const response = await this.getStatsStatsGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Get Timezone
     */
    async getTimezoneTimezoneGetRaw(requestParameters: GetTimezoneTimezoneGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/timezone`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Timezone
     */
    async getTimezoneTimezoneGet(requestParameters: GetTimezoneTimezoneGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.getTimezoneTimezoneGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Health
     */
    async healthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Health
     */
    async healthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.healthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Profile Self
     */
    async profileSelfProfileSelfGetRaw(requestParameters: ProfileSelfProfileSelfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserContext>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/profile/self`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserContextFromJSON(jsonValue));
    }

    /**
     * Profile Self
     */
    async profileSelfProfileSelfGet(requestParameters: ProfileSelfProfileSelfGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserContext> {
        const response = await this.profileSelfProfileSelfGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put Role
     */
    async putRoleUserUserIdRolePutRaw(requestParameters: PutRoleUserUserIdRolePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleSchema>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putRoleUserUserIdRolePut().'
            );
        }

        if (requestParameters['roleSchema'] == null) {
            throw new runtime.RequiredError(
                'roleSchema',
                'Required parameter "roleSchema" was null or undefined when calling putRoleUserUserIdRolePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/user/{user_id}/role`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleSchemaToJSON(requestParameters['roleSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleSchemaFromJSON(jsonValue));
    }

    /**
     * Put Role
     */
    async putRoleUserUserIdRolePut(requestParameters: PutRoleUserUserIdRolePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleSchema> {
        const response = await this.putRoleUserUserIdRolePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put Timezone
     */
    async putTimezoneTimezonePutRaw(requestParameters: PutTimezoneTimezonePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['timezone'] == null) {
            throw new runtime.RequiredError(
                'timezone',
                'Required parameter "timezone" was null or undefined when calling putTimezoneTimezonePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/timezone`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimezoneToJSON(requestParameters['timezone']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Put Timezone
     */
    async putTimezoneTimezonePut(requestParameters: PutTimezoneTimezonePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.putTimezoneTimezonePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
