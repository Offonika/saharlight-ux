/* tslint:disable */
/* eslint-disable */
/**
 * Diabetes Assistant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyticsPoint,
  DayStats,
  HTTPValidationError,
  HistoryRecordSchemaInput,
  HistoryRecordSchemaOutput,
  ProfileSchema,
  ReminderSchema,
  ResponseApiRemindersRemindersGet,
  Timezone,
  UserContext,
  WebUser,
} from '../models/index';
import {
    AnalyticsPointFromJSON,
    AnalyticsPointToJSON,
    DayStatsFromJSON,
    DayStatsToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HistoryRecordSchemaInputFromJSON,
    HistoryRecordSchemaInputToJSON,
    HistoryRecordSchemaOutputFromJSON,
    HistoryRecordSchemaOutputToJSON,
    ProfileSchemaFromJSON,
    ProfileSchemaToJSON,
    ReminderSchemaFromJSON,
    ReminderSchemaToJSON,
    ResponseApiRemindersRemindersGetFromJSON,
    ResponseApiRemindersRemindersGetToJSON,
    TimezoneFromJSON,
    TimezoneToJSON,
    UserContextFromJSON,
    UserContextToJSON,
    WebUserFromJSON,
    WebUserToJSON,
} from '../models/index';

export interface ApiRemindersPostRemindersPostRequest {
    reminderSchema: ReminderSchema;
    xTelegramInitData?: string | null;
}

export interface ApiRemindersRemindersGetRequest {
    telegramId: number;
    id?: number | null;
    xTelegramInitData?: string | null;
}

export interface CreateUserUserPostRequest {
    webUser: WebUser;
    xTelegramInitData?: string | null;
}

export interface DeleteHistoryHistoryRecordIdDeleteRequest {
    recordId: string;
    xTelegramInitData?: string | null;
}

export interface GetAnalyticsAnalyticsGetRequest {
    telegramId: number;
    xTelegramInitData?: string | null;
}

export interface GetHistoryHistoryGetRequest {
    xTelegramInitData?: string | null;
}

export interface GetStatsStatsGetRequest {
    telegramId: number;
    xTelegramInitData?: string | null;
}

export interface GetTimezoneTimezoneGetRequest {
    xTelegramInitData?: string | null;
}

export interface PostHistoryHistoryPostRequest {
    historyRecordSchemaInput: HistoryRecordSchemaInput;
    xTelegramInitData?: string | null;
}

export interface ProfileSelfProfileSelfGetRequest {
    xTelegramInitData?: string | null;
}

export interface ProfilesGetProfilesGetRequest {
    telegramId: number;
}

export interface ProfilesPostProfilesPostRequest {
    profileSchema: ProfileSchema;
}

export interface PutTimezoneTimezonePutRequest {
    timezone: Timezone;
    xTelegramInitData?: string | null;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Api Reminders Post
     */
    async apiRemindersPostRemindersPostRaw(requestParameters: ApiRemindersPostRemindersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['reminderSchema'] == null) {
            throw new runtime.RequiredError(
                'reminderSchema',
                'Required parameter "reminderSchema" was null or undefined when calling apiRemindersPostRemindersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/reminders`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReminderSchemaToJSON(requestParameters['reminderSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Api Reminders Post
     */
    async apiRemindersPostRemindersPost(requestParameters: ApiRemindersPostRemindersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.apiRemindersPostRemindersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Reminders
     */
    async apiRemindersRemindersGetRaw(requestParameters: ApiRemindersRemindersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseApiRemindersRemindersGet>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling apiRemindersRemindersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegram_id'] = requestParameters['telegramId'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/reminders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseApiRemindersRemindersGetFromJSON(jsonValue));
    }

    /**
     * Api Reminders
     */
    async apiRemindersRemindersGet(requestParameters: ApiRemindersRemindersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseApiRemindersRemindersGet> {
        const response = await this.apiRemindersRemindersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ensure a user exists in the database.
     * Create User
     */
    async createUserUserPostRaw(requestParameters: CreateUserUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>> {
        if (requestParameters['webUser'] == null) {
            throw new runtime.RequiredError(
                'webUser',
                'Required parameter "webUser" was null or undefined when calling createUserUserPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/user`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebUserToJSON(requestParameters['webUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Ensure a user exists in the database.
     * Create User
     */
    async createUserUserPost(requestParameters: CreateUserUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }> {
        const response = await this.createUserUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a history record after verifying ownership.
     * Delete History
     */
    async deleteHistoryHistoryRecordIdDeleteRaw(requestParameters: DeleteHistoryHistoryRecordIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>> {
        if (requestParameters['recordId'] == null) {
            throw new runtime.RequiredError(
                'recordId',
                'Required parameter "recordId" was null or undefined when calling deleteHistoryHistoryRecordIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/history/{record_id}`;
        urlPath = urlPath.replace(`{${"record_id"}}`, encodeURIComponent(String(requestParameters['recordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a history record after verifying ownership.
     * Delete History
     */
    async deleteHistoryHistoryRecordIdDelete(requestParameters: DeleteHistoryHistoryRecordIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }> {
        const response = await this.deleteHistoryHistoryRecordIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Analytics
     */
    async getAnalyticsAnalyticsGetRaw(requestParameters: GetAnalyticsAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AnalyticsPoint>>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling getAnalyticsAnalyticsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegramId'] = requestParameters['telegramId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/analytics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnalyticsPointFromJSON));
    }

    /**
     * Get Analytics
     */
    async getAnalyticsAnalyticsGet(requestParameters: GetAnalyticsAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AnalyticsPoint>> {
        const response = await this.getAnalyticsAnalyticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return history records for the authenticated user.
     * Get History
     */
    async getHistoryHistoryGetRaw(requestParameters: GetHistoryHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HistoryRecordSchemaOutput>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/history`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HistoryRecordSchemaOutputFromJSON));
    }

    /**
     * Return history records for the authenticated user.
     * Get History
     */
    async getHistoryHistoryGet(requestParameters: GetHistoryHistoryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HistoryRecordSchemaOutput>> {
        const response = await this.getHistoryHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Stats
     */
    async getStatsStatsGetRaw(requestParameters: GetStatsStatsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayStats>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling getStatsStatsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegramId'] = requestParameters['telegramId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayStatsFromJSON(jsonValue));
    }

    /**
     * Get Stats
     */
    async getStatsStatsGet(requestParameters: GetStatsStatsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayStats> {
        const response = await this.getStatsStatsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Timezone
     */
    async getTimezoneTimezoneGetRaw(requestParameters: GetTimezoneTimezoneGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/timezone`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Timezone
     */
    async getTimezoneTimezoneGet(requestParameters: GetTimezoneTimezoneGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }> {
        const response = await this.getTimezoneTimezoneGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save or update a history record in the database.
     * Post History
     */
    async postHistoryHistoryPostRaw(requestParameters: PostHistoryHistoryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>> {
        if (requestParameters['historyRecordSchemaInput'] == null) {
            throw new runtime.RequiredError(
                'historyRecordSchemaInput',
                'Required parameter "historyRecordSchemaInput" was null or undefined when calling postHistoryHistoryPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/history`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HistoryRecordSchemaInputToJSON(requestParameters['historyRecordSchemaInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Save or update a history record in the database.
     * Post History
     */
    async postHistoryHistoryPost(requestParameters: PostHistoryHistoryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }> {
        const response = await this.postHistoryHistoryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Profile Self
     */
    async profileSelfProfileSelfGetRaw(requestParameters: ProfileSelfProfileSelfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserContext>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/profile/self`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserContextFromJSON(jsonValue));
    }

    /**
     * Profile Self
     */
    async profileSelfProfileSelfGet(requestParameters: ProfileSelfProfileSelfGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserContext> {
        const response = await this.profileSelfProfileSelfGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Profiles Get
     */
    async profilesGetProfilesGetRaw(requestParameters: ProfilesGetProfilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileSchema>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling profilesGetProfilesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegram_id'] = requestParameters['telegramId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/profiles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileSchemaFromJSON(jsonValue));
    }

    /**
     * Profiles Get
     */
    async profilesGetProfilesGet(requestParameters: ProfilesGetProfilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileSchema> {
        const response = await this.profilesGetProfilesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Profiles Post
     */
    async profilesPostProfilesPostRaw(requestParameters: ProfilesPostProfilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>> {
        if (requestParameters['profileSchema'] == null) {
            throw new runtime.RequiredError(
                'profileSchema',
                'Required parameter "profileSchema" was null or undefined when calling profilesPostProfilesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/profiles`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileSchemaToJSON(requestParameters['profileSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Profiles Post
     */
    async profilesPostProfilesPost(requestParameters: ProfilesPostProfilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }> {
        const response = await this.profilesPostProfilesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put Timezone
     */
    async putTimezoneTimezonePutRaw(requestParameters: PutTimezoneTimezonePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>> {
        if (requestParameters['timezone'] == null) {
            throw new runtime.RequiredError(
                'timezone',
                'Required parameter "timezone" was null or undefined when calling putTimezoneTimezonePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTelegramInitData'] != null) {
            headerParameters['X-Telegram-Init-Data'] = String(requestParameters['xTelegramInitData']);
        }


        let urlPath = `/timezone`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimezoneToJSON(requestParameters['timezone']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Put Timezone
     */
    async putTimezoneTimezonePut(requestParameters: PutTimezoneTimezonePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }> {
        const response = await this.putTimezoneTimezonePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
