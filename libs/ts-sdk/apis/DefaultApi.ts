/* tslint:disable */
/* eslint-disable */
/**
 * Diabetes Assistant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiRemindersGet200Response,
  ApiRemindersPost200Response,
  Profile,
  Reminder,
  Status,
  Timezone,
} from '../models/index';
import {
    ApiRemindersGet200ResponseFromJSON,
    ApiRemindersGet200ResponseToJSON,
    ApiRemindersPost200ResponseFromJSON,
    ApiRemindersPost200ResponseToJSON,
    ProfileFromJSON,
    ProfileToJSON,
    ReminderFromJSON,
    ReminderToJSON,
    StatusFromJSON,
    StatusToJSON,
    TimezoneFromJSON,
    TimezoneToJSON,
} from '../models/index';

export interface ApiRemindersGetRequest {
    telegramId: number;
    id?: number;
}

export interface ApiRemindersPostRequest {
    reminder: Reminder;
}

export interface ProfilesGetRequest {
    telegramId: number;
}

export interface ProfilesPostRequest {
    profile: Profile;
}

export interface TimezonePostRequest {
    timezone: Timezone;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * List or retrieve reminders
     */
    async apiRemindersGetRaw(requestParameters: ApiRemindersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiRemindersGet200Response>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling apiRemindersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegram_id'] = requestParameters['telegramId'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/reminders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiRemindersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List or retrieve reminders
     */
    async apiRemindersGet(requestParameters: ApiRemindersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiRemindersGet200Response> {
        const response = await this.apiRemindersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save reminder
     */
    async apiRemindersPostRaw(requestParameters: ApiRemindersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiRemindersPost200Response>> {
        if (requestParameters['reminder'] == null) {
            throw new runtime.RequiredError(
                'reminder',
                'Required parameter "reminder" was null or undefined when calling apiRemindersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/reminders`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReminderToJSON(requestParameters['reminder']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiRemindersPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Save reminder
     */
    async apiRemindersPost(requestParameters: ApiRemindersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiRemindersPost200Response> {
        const response = await this.apiRemindersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Health check
     */
    async healthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Health check
     */
    async healthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.healthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user profile
     */
    async profilesGetRaw(requestParameters: ProfilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling profilesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegram_id'] = requestParameters['telegramId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/profiles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Get user profile
     */
    async profilesGet(requestParameters: ProfilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.profilesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save user profile
     */
    async profilesPostRaw(requestParameters: ProfilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters['profile'] == null) {
            throw new runtime.RequiredError(
                'profile',
                'Required parameter "profile" was null or undefined when calling profilesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/profiles`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileToJSON(requestParameters['profile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Save user profile
     */
    async profilesPost(requestParameters: ProfilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.profilesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save timezone
     */
    async timezonePostRaw(requestParameters: TimezonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters['timezone'] == null) {
            throw new runtime.RequiredError(
                'timezone',
                'Required parameter "timezone" was null or undefined when calling timezonePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/timezone`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimezoneToJSON(requestParameters['timezone']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Save timezone
     */
    async timezonePost(requestParameters: TimezonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.timezonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
