/* tslint:disable */
/* eslint-disable */
/**
 * Diabetes Assistant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ReminderSchema,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ReminderSchemaFromJSON,
    ReminderSchemaToJSON,
} from '../models/index';

export interface RemindersDeleteRequest {
    telegramId: number;
    id: number;
}

export interface RemindersGetRequest {
    telegramId: number;
}

export interface RemindersIdGetRequest {
    id: number;
    telegramId: number;
}

export interface RemindersPatchRequest {
    reminder: ReminderSchema;
}

export interface RemindersPostRequest {
    reminder: ReminderSchema;
}

/**
 * 
 */
export class RemindersApi extends runtime.BaseAPI {

    /**
     * Reminders Delete
     */
    async remindersDeleteRaw(requestParameters: RemindersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling remindersDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling remindersDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegramId'] = requestParameters['telegramId'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Telegram-Init-Data"] = await this.configuration.apiKey("X-Telegram-Init-Data"); // TelegramInitData authentication
        }


        let urlPath = `/reminders`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reminders Delete
     */
    async remindersDelete(requestParameters: RemindersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.remindersDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reminders Get
     */
    async remindersGetRaw(requestParameters: RemindersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReminderSchema>>> {
        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling remindersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegramId'] = requestParameters['telegramId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Telegram-Init-Data"] = await this.configuration.apiKey("X-Telegram-Init-Data"); // TelegramInitData authentication
        }


        let urlPath = `/reminders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReminderSchemaFromJSON));
    }

    /**
     * Reminders Get
     */
    async remindersGet(requestParameters: RemindersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReminderSchema>> {
        const response = await this.remindersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reminders Id Get
     */
    async remindersIdGetRaw(requestParameters: RemindersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReminderSchema>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling remindersIdGet().'
            );
        }

        if (requestParameters['telegramId'] == null) {
            throw new runtime.RequiredError(
                'telegramId',
                'Required parameter "telegramId" was null or undefined when calling remindersIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['telegramId'] != null) {
            queryParameters['telegramId'] = requestParameters['telegramId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Telegram-Init-Data"] = await this.configuration.apiKey("X-Telegram-Init-Data"); // TelegramInitData authentication
        }


        let urlPath = `/reminders/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReminderSchemaFromJSON(jsonValue));
    }

    /**
     * Reminders Id Get
     */
    async remindersIdGet(requestParameters: RemindersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReminderSchema> {
        const response = await this.remindersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reminders Patch
     */
    async remindersPatchRaw(requestParameters: RemindersPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['reminder'] == null) {
            throw new runtime.RequiredError(
                'reminder',
                'Required parameter "reminder" was null or undefined when calling remindersPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Telegram-Init-Data"] = await this.configuration.apiKey("X-Telegram-Init-Data"); // TelegramInitData authentication
        }


        let urlPath = `/reminders`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReminderSchemaToJSON(requestParameters['reminder']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reminders Patch
     */
    async remindersPatch(requestParameters: RemindersPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.remindersPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reminders Post
     */
    async remindersPostRaw(requestParameters: RemindersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['reminder'] == null) {
            throw new runtime.RequiredError(
                'reminder',
                'Required parameter "reminder" was null or undefined when calling remindersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Telegram-Init-Data"] = await this.configuration.apiKey("X-Telegram-Init-Data"); // TelegramInitData authentication
        }


        let urlPath = `/reminders`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReminderSchemaToJSON(requestParameters['reminder']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reminders Post
     */
    async remindersPost(requestParameters: RemindersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.remindersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
