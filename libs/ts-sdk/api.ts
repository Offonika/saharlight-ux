/* tslint:disable */
/* eslint-disable */
/**
 * Diabetes Assistant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * @type ApiRemindersGet200Response
 * @export
 */
export type ApiRemindersGet200Response = Array<Reminder> | Reminder;

/**
 * 
 * @export
 * @interface ApiRemindersPost200Response
 */
export interface ApiRemindersPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiRemindersPost200Response
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiRemindersPost200Response
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    'telegram_id': number;
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    'icr': number;
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    'cf': number;
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    'target': number;
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    'low': number;
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    'high': number;
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    'org_id'?: number | null;
}
/**
 * 
 * @export
 * @interface Reminder
 */
export interface Reminder {
    /**
     * 
     * @type {number}
     * @memberof Reminder
     */
    'telegram_id': number;
    /**
     * 
     * @type {number}
     * @memberof Reminder
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Reminder
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Reminder
     */
    'time'?: string;
    /**
     * 
     * @type {number}
     * @memberof Reminder
     */
    'interval_hours'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof Reminder
     */
    'is_enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface Timezone
 */
export interface Timezone {
    /**
     * 
     * @type {number}
     * @memberof Timezone
     */
    'telegram_id': number;
    /**
     * 
     * @type {string}
     * @memberof Timezone
     */
    'tz': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List or retrieve reminders
         * @param {number} telegramId 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRemindersGet: async (telegramId: number, id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'telegramId' is not null or undefined
            assertParamExists('apiRemindersGet', 'telegramId', telegramId)
            const localVarPath = `/api/reminders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (telegramId !== undefined) {
                localVarQueryParameter['telegram_id'] = telegramId;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save reminder
         * @param {Reminder} reminder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRemindersPost: async (reminder: Reminder, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reminder' is not null or undefined
            assertParamExists('apiRemindersPost', 'reminder', reminder)
            const localVarPath = `/api/reminders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reminder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user profile
         * @param {number} telegramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGet: async (telegramId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'telegramId' is not null or undefined
            assertParamExists('profilesGet', 'telegramId', telegramId)
            const localVarPath = `/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (telegramId !== undefined) {
                localVarQueryParameter['telegram_id'] = telegramId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save user profile
         * @param {Profile} profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesPost: async (profile: Profile, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profile' is not null or undefined
            assertParamExists('profilesPost', 'profile', profile)
            const localVarPath = `/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save timezone
         * @param {Timezone} timezone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timezonePost: async (timezone: Timezone, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timezone' is not null or undefined
            assertParamExists('timezonePost', 'timezone', timezone)
            const localVarPath = `/timezone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timezone, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List or retrieve reminders
         * @param {number} telegramId 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRemindersGet(telegramId: number, id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRemindersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRemindersGet(telegramId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiRemindersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Save reminder
         * @param {Reminder} reminder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRemindersPost(reminder: Reminder, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRemindersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRemindersPost(reminder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiRemindersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user profile
         * @param {number} telegramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesGet(telegramId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesGet(telegramId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.profilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Save user profile
         * @param {Profile} profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesPost(profile: Profile, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesPost(profile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.profilesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Save timezone
         * @param {Timezone} timezone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timezonePost(timezone: Timezone, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timezonePost(timezone, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.timezonePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary List or retrieve reminders
         * @param {number} telegramId 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRemindersGet(telegramId: number, id?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiRemindersGet200Response> {
            return localVarFp.apiRemindersGet(telegramId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save reminder
         * @param {Reminder} reminder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRemindersPost(reminder: Reminder, options?: RawAxiosRequestConfig): AxiosPromise<ApiRemindersPost200Response> {
            return localVarFp.apiRemindersPost(reminder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: RawAxiosRequestConfig): AxiosPromise<Status> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user profile
         * @param {number} telegramId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGet(telegramId: number, options?: RawAxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.profilesGet(telegramId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save user profile
         * @param {Profile} profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesPost(profile: Profile, options?: RawAxiosRequestConfig): AxiosPromise<Status> {
            return localVarFp.profilesPost(profile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save timezone
         * @param {Timezone} timezone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timezonePost(timezone: Timezone, options?: RawAxiosRequestConfig): AxiosPromise<Status> {
            return localVarFp.timezonePost(timezone, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary List or retrieve reminders
     * @param {number} telegramId 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiRemindersGet(telegramId: number, id?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiRemindersGet(telegramId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save reminder
     * @param {Reminder} reminder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiRemindersPost(reminder: Reminder, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiRemindersPost(reminder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user profile
     * @param {number} telegramId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profilesGet(telegramId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).profilesGet(telegramId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save user profile
     * @param {Profile} profile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profilesPost(profile: Profile, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).profilesPost(profile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save timezone
     * @param {Timezone} timezone 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public timezonePost(timezone: Timezone, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).timezonePost(timezone, options).then((request) => request(this.axios, this.basePath));
    }
}



