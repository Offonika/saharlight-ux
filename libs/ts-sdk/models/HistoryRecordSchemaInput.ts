/* tslint:disable */
/* eslint-disable */
/**
 * Diabetes Assistant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema for user history records.
 * @export
 * @interface HistoryRecordSchemaInput
 */
export interface HistoryRecordSchemaInput {
    /**
     * 
     * @type {string}
     * @memberof HistoryRecordSchemaInput
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof HistoryRecordSchemaInput
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof HistoryRecordSchemaInput
     */
    time: string;
    /**
     * 
     * @type {number}
     * @memberof HistoryRecordSchemaInput
     */
    sugar?: number | null;
    /**
     * 
     * @type {number}
     * @memberof HistoryRecordSchemaInput
     */
    carbs?: number | null;
    /**
     * 
     * @type {number}
     * @memberof HistoryRecordSchemaInput
     */
    breadUnits?: number | null;
    /**
     * 
     * @type {number}
     * @memberof HistoryRecordSchemaInput
     */
    insulin?: number | null;
    /**
     * 
     * @type {string}
     * @memberof HistoryRecordSchemaInput
     */
    notes?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HistoryRecordSchemaInput
     */
    type: HistoryRecordSchemaInputTypeEnum;
}


/**
 * @export
 */
export const HistoryRecordSchemaInputTypeEnum = {
    Measurement: 'measurement',
    Meal: 'meal',
    Insulin: 'insulin'
} as const;
export type HistoryRecordSchemaInputTypeEnum = typeof HistoryRecordSchemaInputTypeEnum[keyof typeof HistoryRecordSchemaInputTypeEnum];


/**
 * Check if a given object implements the HistoryRecordSchemaInput interface.
 */
export function instanceOfHistoryRecordSchemaInput(value: object): value is HistoryRecordSchemaInput {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('time' in value) || value['time'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function HistoryRecordSchemaInputFromJSON(json: any): HistoryRecordSchemaInput {
    return HistoryRecordSchemaInputFromJSONTyped(json, false);
}

export function HistoryRecordSchemaInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): HistoryRecordSchemaInput {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'date': (new Date(json['date'])),
        'time': json['time'],
        'sugar': json['sugar'] == null ? undefined : json['sugar'],
        'carbs': json['carbs'] == null ? undefined : json['carbs'],
        'breadUnits': json['breadUnits'] == null ? undefined : json['breadUnits'],
        'insulin': json['insulin'] == null ? undefined : json['insulin'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'type': json['type'],
    };
}

export function HistoryRecordSchemaInputToJSON(json: any): HistoryRecordSchemaInput {
    return HistoryRecordSchemaInputToJSONTyped(json, false);
}

export function HistoryRecordSchemaInputToJSONTyped(value?: HistoryRecordSchemaInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'date': ((value['date']).toISOString().substring(0,10)),
        'time': value['time'],
        'sugar': value['sugar'],
        'carbs': value['carbs'],
        'breadUnits': value['breadUnits'],
        'insulin': value['insulin'],
        'notes': value['notes'],
        'type': value['type'],
    };
}

