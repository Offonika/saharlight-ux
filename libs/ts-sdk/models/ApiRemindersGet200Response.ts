/* tslint:disable */
/* eslint-disable */
/**
 * Diabetes Assistant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Reminder } from './Reminder';
import {
    instanceOfReminder,
    ReminderFromJSON,
    ReminderFromJSONTyped,
    ReminderToJSON,
} from './Reminder';

/**
 * @type ApiRemindersGet200Response
 * 
 * @export
 */
export type ApiRemindersGet200Response = Array<Reminder> | Reminder;

export function ApiRemindersGet200ResponseFromJSON(json: any): ApiRemindersGet200Response {
    return ApiRemindersGet200ResponseFromJSONTyped(json, false);
}

export function ApiRemindersGet200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiRemindersGet200Response {
    if (json == null) {
        return json;
    }
    if (typeof json !== 'object') {
        return json;
    }
    if (instanceOfReminder(json)) {
        return ReminderFromJSONTyped(json, true);
    }
    if (Array.isArray(json)) {
        if (json.every(item => typeof item === 'object')) {
            if (json.every(item => instanceOfReminder(item))) {
                return json.map(value => ReminderFromJSONTyped(value, true));
            }
        }
        return json;
    }

    return {} as any;
}

export function ApiRemindersGet200ResponseToJSON(json: any): any {
    return ApiRemindersGet200ResponseToJSONTyped(json, false);
}

export function ApiRemindersGet200ResponseToJSONTyped(value?: ApiRemindersGet200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    if (typeof value !== 'object') {
        return value;
    }
    if (instanceOfReminder(value)) {
        return ReminderToJSON(value as Reminder);
    }
    if (Array.isArray(value)) {
        if (value.every(item => typeof item === 'object')) {
            if (value.every(item => instanceOfReminder(item))) {
                return value.map(value => ReminderToJSON(value as Reminder));
            }
        }
        return value;
    }

    return {};
}

