openapi: 3.1.0
info:
  title: Diabetes Assistant API
  version: 1.0.0
servers:
  - url: /api
tags:
- name: Profiles
- name: History
- name: Reminders
- name: Onboarding
paths:
  /health:
    get:
      summary: Health
      operationId: healthGet
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                title: Response Health Get
      security: []
  /health/ping:
    get:
      summary: Health Ping
      operationId: healthPingGet
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                title: Response Health Ping Get
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                title: Response Health Ping Get 503
      security: []
  /profiles:
    post:
      tags:
      - Profiles
      summary: Profiles Post
      operationId: profilesPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileSchema'
      responses:
        '200':
          description: Successful Response. Returns profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '404':
          description: profile not found
    get:
      tags:
      - Profiles
      summary: Profiles Get
      operationId: profilesGet
      parameters:
      - name: telegramId
        in: query
        required: true
        schema:
          type: integer
          title: Telegram Id
      responses:
        '200':
          description: Successful Response. Returns profile settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileSettingsOut'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '404':
          description: profile not found
  /profile:
    patch:
      tags:
      - Profiles
      summary: Profile Patch
      operationId: profilePatch
      parameters:
      - name: deviceTz
        in: query
        required: false
        schema:
          type: string
          title: Device Tz
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileSettingsIn'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileSettingsOut'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /reminders:
    get:
      tags:
      - Reminders
      summary: Reminders Get
      operationId: reminders_get
      parameters:
      - name: telegramId
        in: query
        required: true
        schema:
          type: integer
          title: Telegram Id
      responses:
        '200':
          description: >-
            Successful Response. Returns an array of reminders.
            An empty array is returned when no reminders exist.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReminderSchema'
                title: Response Reminders Get
                default: []
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '404':
          description: Reminder not found or telegramId mismatch
    post:
      tags:
      - Reminders
      summary: Reminders Post
      operationId: reminders_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReminderSchema'
      x-codegen-request-body-name: reminder
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                title: Response Reminders Post
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
      - Reminders
      summary: Reminders Patch
      operationId: reminders_patch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReminderSchema'
      x-codegen-request-body-name: reminder
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                title: Response Reminders Patch
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
      - Reminders
      summary: Reminders Delete
      operationId: reminders_delete
      parameters:
      - name: telegramId
        in: query
        required: true
        schema:
          type: integer
          title: Telegram Id
      - name: id
        in: query
        required: true
        schema:
          type: integer
          title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                title: Response Reminders Delete
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '404':
          description: Reminder not found
  /reminders/{id}:
    get:
      tags:
      - Reminders
      summary: Reminders Id Get
      operationId: reminders_id_get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          title: Id
      - name: telegramId
        in: query
        required: true
        schema:
          type: integer
          title: Telegram Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReminderSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '404':
          description: Reminder not found or telegramId mismatch
  /timezones:
    get:
      summary: Get Timezones
      operationId: get_timezones_timezones_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                title: Response Get Timezones Timezones Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /timezone:
    get:
      summary: Get Timezone
      operationId: get_timezone_timezone_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                title: Response Get Timezone Timezone Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      summary: Put Timezone
      operationId: put_timezone_timezone_put
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timezone'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                title: Response Put Timezone Timezone Put
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /profile/self:
    get:
      summary: Profile Self
      operationId: profile_self_profile_self_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContext'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /stats:
    get:
      summary: Get Stats
      operationId: get_stats_stats_get
      parameters:
      - name: telegramId
        in: query
        required: true
        schema:
          type: integer
          title: Telegramid
      responses:
        '200':
          description: Successful Response. Returns statistics for the day.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DayStats'
                  - type: 'null'
        '204':
          description: No Content - no statistics available.
        '403':
          description: Forbidden
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /analytics:
    get:
      summary: Get Analytics
      operationId: get_analytics_analytics_get
      parameters:
      - name: telegramId
        in: query
        required: true
        schema:
          type: integer
          title: Telegramid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticsPoint'
                title: Response Get Analytics Analytics Get
        '403':
          description: Forbidden
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /user:
    post:
      summary: Create User
      description: Ensure a user exists in the database.
      operationId: create_user_user_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebUser'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                title: Response Create User User Post
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /user/{user_id}/role:
    get:
      summary: Get Role
      operationId: get_role_user_user_id_role_get
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
          title: User Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      summary: Put Role
      operationId: put_role_user_user_id_role_put
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
          title: User Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleSchema'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /history:
    post:
      tags:
      - History
      summary: Post History
      description: Save or update a history record in the database.
      operationId: historyPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoryRecordSchema-Input'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                title: Response Post History History Post
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    get:
      tags:
      - History
      summary: Get History
      description: Return history records for the authenticated user.
      operationId: historyGet
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryRecordSchema-Output'
                title: Response Get History History Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /history/{id}:
    delete:
      tags:
      - History
      summary: Delete History
      description: Delete a history record after verifying ownership.
      operationId: historyIdDelete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                title: Response Delete History History  Record Id  Delete
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /onboarding/events:
    post:
      tags:
      - Onboarding
      summary: Onboarding Events Post
      operationId: onboardingEventsPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPayload'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    title: Ok
                required:
                - ok
                title: Response Onboarding Events Post
        '401':
          description: Unauthorized
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /onboarding/status:
    get:
      tags:
      - Onboarding
      summary: Onboarding Status Get
      operationId: onboardingStatusGet
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingStatusResponse'
        '401':
          description: Unauthorized
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    AnalyticsPoint:
      properties:
        date:
          type: string
          title: Date
        sugar:
          type: number
          title: Sugar
      type: object
      required:
      - date
      - sugar
      title: AnalyticsPoint
    DayStats:
      properties:
        sugar:
          type: number
          title: Sugar
        breadUnits:
          type: number
          title: Breadunits
        insulin:
          type: number
          title: Insulin
      type: object
      required:
      - sugar
      - breadUnits
      - insulin
      title: DayStats
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    HistoryRecordSchema-Input:
      properties:
        id:
          type: string
          title: Id
        date:
          type: string
          format: date
          title: Date
        time:
          type: string
          pattern: '^\d{2}:\d{2}$'
          title: Time
        sugar:
          anyOf:
          - type: number
          - type: 'null'
          title: Sugar
        carbs:
          anyOf:
          - type: number
          - type: 'null'
          title: Carbs
        breadUnits:
          anyOf:
          - type: number
          - type: 'null'
          title: Breadunits
        insulin:
          anyOf:
          - type: number
          - type: 'null'
          title: Insulin
        notes:
          anyOf:
          - type: string
          - type: 'null'
          title: Notes
        type:
          type: string
          enum:
          - measurement
          - meal
          - insulin
          title: Type
      type: object
      required:
      - id
      - date
      - time
      - type
      title: HistoryRecordSchema
      description: Schema for user history records.
    HistoryRecordSchema-Output:
      properties:
        id:
          type: string
          title: Id
        date:
          type: string
          title: Date
        time:
          type: string
          pattern: '^\d{2}:\d{2}$'
          title: Time
        sugar:
          anyOf:
          - type: number
          - type: 'null'
          title: Sugar
        carbs:
          anyOf:
          - type: number
          - type: 'null'
          title: Carbs
        breadUnits:
          anyOf:
          - type: number
          - type: 'null'
          title: Breadunits
        insulin:
          anyOf:
          - type: number
          - type: 'null'
          title: Insulin
        notes:
          anyOf:
          - type: string
          - type: 'null'
          title: Notes
        type:
          type: string
          enum:
          - measurement
          - meal
          - insulin
          title: Type
      type: object
      required:
      - id
      - date
      - time
      - type
      title: HistoryRecordSchema
      description: Schema for user history records.
    ProfileSettingsIn:
      properties:
        timezone:
          anyOf:
          - type: string
          - type: 'null'
          title: Timezone
        timezoneAuto:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Timezone Auto
        dia:
          type: number
          title: Dia
        roundStep:
          type: number
          title: Round Step
        carbUnits:
          type: string
          enum:
          - g
          - xe
          title: Carb Units
        gramsPerXe:
          type: number
          title: Grams Per Xe
        therapyType:
          type: string
          enum:
          - insulin
          - tablets
          - none
          - mixed
          title: Therapy Type
        sosContact:
          anyOf:
          - type: string
          - type: 'null'
          title: Sos Contact
        sosAlertsEnabled:
          type: boolean
          title: Sos Alerts Enabled
          default: true
        rapidInsulinType:
          anyOf:
          - type: string
            enum:
            - aspart
            - lispro
            - glulisine
            - regular
          - type: 'null'
          title: Rapid Insulin Type
        maxBolus:
          type: number
          title: Max Bolus
        preBolus:
          type: integer
          title: Pre Bolus
        afterMealMinutes:
          type: integer
          title: After Meal Minutes
      type: object
      title: ProfileSettingsIn
    ProfileSettingsOut:
      allOf:
      - $ref: '#/components/schemas/ProfileSettingsIn'
      required:
      - timezone
      - timezoneAuto
      - dia
      - roundStep
      - carbUnits
      - gramsPerXe
      - sosAlertsEnabled
      - therapyType
      - maxBolus
      - preBolus
      - afterMealMinutes
      title: ProfileSettingsOut
    ProfileSchema:
      properties:
        telegramId:
          type: integer
          title: Telegram Id
        icr:
          anyOf:
          - type: number
          - type: 'null'
          title: Icr
        cf:
          anyOf:
          - type: number
          - type: 'null'
          title: Cf
          description: Alias `cf` for compatibility.
        target:
          type: number
          title: Target
        low:
          type: number
          title: Low
          description: Alias `targetLow` accepted on input.
        high:
          type: number
          title: High
          description: Alias `targetHigh` accepted on input.
        quietStart:
          type: string
          title: Quiet Start
          default: '23:00'
        quietEnd:
          type: string
          title: Quiet End
          default: '07:00'
        sosContact:
          anyOf:
          - type: string
          - type: 'null'
          title: Sos Contact
        therapyType:
          type: string
          enum:
          - insulin
          - tablets
          - none
          - mixed
          title: Therapy Type
        sosAlertsEnabled:
          type: boolean
          title: Sos Alerts Enabled
          default: true
        timezone:
          type: string
          title: Timezone
          default: UTC
        timezoneAuto:
          type: boolean
          title: Timezone Auto
          default: true
        orgId:
          anyOf:
          - type: integer
          - type: 'null'
          title: Org Id
      type: object
      required:
      - telegramId
      - target
      - low
      - high
      title: ProfileSchema
    ReminderType:
      type: string
      enum:
      - sugar
      - insulin_short
      - insulin_long
      - after_meal
      - meal
      - sensor_change
      - injection_site
      - custom
      title: ReminderType
    ScheduleKind:
      type: string
      enum:
      - at_time
      - every
      - after_event
      title: ScheduleKind
    DayOfWeek:
      type: integer
      minimum: 1
      maximum: 7
      description: 1=Mon … 7=Sun
      title: DayOfWeek
    ReminderSchema:
      properties:
        telegramId:
          type: integer
          title: Telegram Id
        id:
          anyOf:
          - type: integer
          - type: 'null'
          readOnly: true
          title: Id
        type:
          $ref: '#/components/schemas/ReminderType'
          title: Type
        title:
          anyOf:
          - type: string
          - type: 'null'
          description: Autogenerated if empty
          title: Title
        kind:
          $ref: '#/components/schemas/ScheduleKind'
          default: at_time
          title: Kind
        time:
          anyOf:
          - type: string
          - type: 'null'
          pattern: '^([01]\\d|2[0-3]):[0-5]\\d$'
          description: HH:MM (kind=at_time)
          title: Time
        intervalMinutes:
          anyOf:
          - type: integer
            minimum: 1
          - type: 'null'
          description: For kind=every
          title: Interval Minutes
        minutesAfter:
          anyOf:
          - type: integer
            minimum: 1
          - type: 'null'
          description: For kind=after_event
          title: Minutes After
        intervalHours:
          anyOf:
          - type: integer
            minimum: 1
          - type: 'null'
          deprecated: true
          description: DEPRECATED, use intervalMinutes
          title: Interval Hours
        daysOfWeek:
          anyOf:
          - type: array
            items:
              $ref: '#/components/schemas/DayOfWeek'
            uniqueItems: true
          - type: 'null'
          title: Days Of Week
        isEnabled:
          type: boolean
          default: true
          title: Is Enabled
        orgId:
          anyOf:
          - type: integer
          - type: 'null'
          title: Org Id
        nextAt:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          readOnly: true
          description: Next fire in user timezone
          title: Next At
        lastFiredAt:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          readOnly: true
          title: Last Fired At
        fires7d:
          type: integer
          readOnly: true
          title: Fires7d
      type: object
      required:
      - telegramId
      - type
      oneOf:
      - required:
        - kind
        - time
      - required:
        - kind
        - intervalMinutes
      - required:
        - kind
        - minutesAfter
      title: ReminderSchema
    RoleSchema:
      properties:
        role:
          type: string
          title: Role
      type: object
      required:
      - role
      title: RoleSchema
    Timezone:
      properties:
        tz:
          type: string
          title: Tz
      type: object
      required:
      - tz
      title: Timezone
    UserContext:
      properties:
        id:
          type: integer
          title: Id
        first_name:
          type: string
          title: First Name
        last_name:
          type: string
          title: Last Name
        username:
          type: string
          title: Username
        language_code:
          type: string
          title: Language Code
        is_premium:
          type: boolean
          title: Is Premium
      type: object
      required:
      - id
      title: UserContext
      description: Telegram user data supplied via WebApp init data.
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
    WebUser:
      properties:
        telegramId:
          type: integer
          title: Telegram Id
      type: object
      required:
      - telegramId
      title: WebUser
    EventPayload:
      properties:
        event:
          type: string
          title: Event
        step:
          anyOf:
          - type: integer
          - type: 'null'
          title: Step
        meta:
          anyOf:
          - type: object
            additionalProperties: true
          - type: 'null'
          title: Meta
      type: object
      required:
      - event
      title: EventPayload
    OnboardingStatusResponse:
      properties:
        completed:
          type: boolean
          title: Completed
        step:
          anyOf:
          - type: string
          - type: 'null'
          title: Step
        missing:
          items:
            type: string
          type: array
          title: Missing
      type: object
      required:
      - completed
      - step
      - missing
      title: OnboardingStatusResponse
  securitySchemes:
    telegramInitData:
      type: apiKey
      in: header
      name: Authorization
security:
- telegramInitData: []
