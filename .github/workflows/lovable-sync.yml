name: Sync Lovable UI into Monorepo

on:
  push:
    branches: [lovable]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: lovable-sync-${{ github.ref }}
  cancel-in-progress: true

env:
  TARGET_BRANCH: main
  SYNC_INDEX_HTML: "false"
  SYNC_OPENAPI: "false"
  SYNC_BRANCH_PREFIX: lovable-sync

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (lovable)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: lovable

      - name: Snapshot sources from lovable
        run: |
          set -e
          mkdir -p /tmp/lovable_snapshot
          [ -d src ] && tar -C . -cf /tmp/lovable_snapshot/src.tar src || true
          [ -d public ] && tar -C . -cf /tmp/lovable_snapshot/public.tar public || true
          [ -d libs/ts-sdk ] && tar -C libs -cf /tmp/lovable_snapshot/ts-sdk.tar ts-sdk || true
          if [ "${SYNC_OPENAPI}" = "true" ] && [ -f libs/contracts/openapi.yaml ]; then
            mkdir -p /tmp/lovable_snapshot/contracts
            cp libs/contracts/openapi.yaml /tmp/lovable_snapshot/contracts/openapi.yaml
          fi
          if [ "${SYNC_INDEX_HTML}" = "true" ] && [ -f index.html ]; then
            cp index.html /tmp/lovable_snapshot/index.html
          fi

      - name: Switch to target branch (main)
        run: |
          set -e
          git fetch --all --prune
          git checkout -B "${TARGET_BRANCH}" "origin/${TARGET_BRANCH}"
          git branch --unset-upstream || true
          echo "HEAD branch: $(git symbolic-ref --short HEAD)"

      - name: Assert HEAD is main
        run: |
          set -e
          CUR="$(git symbolic-ref --short HEAD)"
          test "$CUR" = "${TARGET_BRANCH}" || { echo "::error ::Not on ${TARGET_BRANCH}, on $CUR"; exit 1; }

      - name: Restore snapshot into monorepo layout
        run: |
          set -e
          if [ -f /tmp/lovable_snapshot/src.tar ]; then
            rm -rf services/webapp/ui/src
            mkdir -p services/webapp/ui
            tar -xf /tmp/lovable_snapshot/src.tar -C services/webapp/ui
          fi
          if [ -f /tmp/lovable_snapshot/public.tar ]; then
            rm -rf services/webapp/ui/public
            mkdir -p services/webapp/ui
            tar -xf /tmp/lovable_snapshot/public.tar -C services/webapp/ui
          fi
          if [ -f /tmp/lovable_snapshot/ts-sdk.tar ]; then
            rm -rf libs/ts-sdk
            mkdir -p libs
            tar -xf /tmp/lovable_snapshot/ts-sdk.tar -C libs
          fi
          if [ -f /tmp/lovable_snapshot/contracts/openapi.yaml ]; then
            mkdir -p libs/contracts
            cp /tmp/lovable_snapshot/contracts/openapi.yaml libs/contracts/openapi.yaml
          fi
          if [ -f /tmp/lovable_snapshot/index.html ]; then
            mkdir -p services/webapp/ui
            cp /tmp/lovable_snapshot/index.html services/webapp/ui/index.html
          fi

      - name: Guard changed paths
        run: |
          set -e
          git fetch origin "${TARGET_BRANCH}"
          CHANGED="$(git diff --name-only "remotes/origin/${TARGET_BRANCH}"...HEAD || true)"
          echo "$CHANGED" | awk '{print " - " $0}'
          ALLOWED='^(services/webapp/ui/(src|public)/|libs/ts-sdk/)'
          if [ "${SYNC_OPENAPI}" = "true" ]; then
            ALLOWED="${ALLOWED}|^(libs/contracts/openapi.yaml)$"
          fi
          if [ -n "$CHANGED" ] && ! echo "$CHANGED" | grep -Eq "$ALLOWED"; then
            echo "::error ::Changes outside allowed paths detected"
            exit 1
          fi

      - name: Setup Node (cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: services/webapp/ui/package-lock.json

      - name: Install deps (include dev)
        working-directory: services/webapp/ui
        env:
          NODE_ENV: development
        run: npm ci --include=dev --no-audit --no-fund

      - name: Ensure ALL deps from package.json present (no-save)
        working-directory: services/webapp/ui
        run: |
          set -e
          TO_INSTALL="$(node - <<'NODE'
          const pkg = require('./package.json');
          const deps = Object.assign({}, pkg.dependencies||{}, pkg.devDependencies||{});
          const need = [];
          for (const [name, spec] of Object.entries(deps)) {
            try { require.resolve(name); } catch { need.push(`${name}@${spec}`); }
          }
          process.stdout.write(need.join(' '));
          NODE
          )"
          if [ -n "$TO_INSTALL" ]; then
            echo "Installing temporarily (no-save): $TO_INSTALL"
            npm install --no-save $TO_INSTALL
          else
            echo "All deps present."
          fi

      - name: Typecheck
        working-directory: services/webapp/ui
        run: npm run typecheck || true

      - name: Build UI
        working-directory: services/webapp/ui
        run: npm run build

      - name: Commit changes
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet; then
            git add -A
            git commit -m "chore(ui): sync from lovable @ ${GITHUB_SHA}"
          else
            echo "No changes to commit."
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GHCR_PAT }}  # <--- вот тут! Используем Personal Access Token
          branch: ${{ env.SYNC_BRANCH_PREFIX }}-${{ github.sha }}
          base: ${{ env.TARGET_BRANCH }}
          title: "chore(ui): sync from lovable @ ${{ github.sha }}"
          body: |
            Sync UI from `lovable`:
            - src/ → services/webapp/ui/src/
            - public/ → services/webapp/ui/public/
            - libs/ts-sdk/ → libs/ts-sdk/
            (optional) index.html/openapi copied if SYNC_* flags are true.
          # labels: |
          #   webapp-sync
          draft: false
